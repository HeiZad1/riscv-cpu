$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 >! clk $end
  $var wire 1 ?! reset $end
  $var wire 32 @! WriteData [31:0] $end
  $var wire 32 A! DataAdr [31:0] $end
  $var wire 1 B! MemWrite $end
  $scope module rv32i $end
   $var wire 1 >! clk $end
   $var wire 1 ?! reset $end
   $var wire 32 @! WriteData [31:0] $end
   $var wire 32 A! DataAdr [31:0] $end
   $var wire 1 B! MemWrite $end
   $var wire 32 3! PC [31:0] $end
   $var wire 32 4! Instr [31:0] $end
   $var wire 32 # ReadData [31:0] $end
   $var wire 32 $ mask [31:0] $end
   $scope module dmem $end
    $var wire 1 >! clk $end
    $var wire 1 B! we $end
    $var wire 32 A! a [31:0] $end
    $var wire 32 @! wd [31:0] $end
    $var wire 32 $ write_mask [31:0] $end
    $var wire 32 # rd [31:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 C! masked_data [31:0] $end
    $upscope $end
   $upscope $end
   $scope module imem $end
    $var wire 32 3! a [31:0] $end
    $var wire 32 4! rd [31:0] $end
   $upscope $end
   $scope module rv $end
    $var wire 1 >! clk $end
    $var wire 1 ?! reset $end
    $var wire 32 3! PCF [31:0] $end
    $var wire 32 4! Instr [31:0] $end
    $var wire 1 B! MemWrite $end
    $var wire 32 A! ALUResultM [31:0] $end
    $var wire 32 @! WriteData [31:0] $end
    $var wire 32 $ mask [31:0] $end
    $var wire 32 # ReadData [31:0] $end
    $var wire 1 % ALUSrcE $end
    $var wire 1 & RegWriteW $end
    $var wire 1 ' RegWriteM $end
    $var wire 1 ( Zero $end
    $var wire 1 7! stallD $end
    $var wire 1 8! stallF $end
    $var wire 1 5! FlushD $end
    $var wire 1 9! FlushE $end
    $var wire 1 ) ResultSrcE0 $end
    $var wire 1 * loadW $end
    $var wire 1 + less $end
    $var wire 1 , jarlW $end
    $var wire 1 5! PCSrcE $end
    $var wire 2 - ResultSrcW [1:0] $end
    $var wire 3 X ImmSrcD [2:0] $end
    $var wire 4 . ALUControlE [3:0] $end
    $var wire 2 / SDypeSecM [1:0] $end
    $var wire 2 0 ForWordAE [1:0] $end
    $var wire 2 1 ForWordBE [1:0] $end
    $var wire 5 2 RdW [4:0] $end
    $var wire 5 3 RdM [4:0] $end
    $var wire 5 4 RdE [4:0] $end
    $var wire 5 Y Rs1D [4:0] $end
    $var wire 5 Z Rs2D [4:0] $end
    $var wire 5 5 Rs1E [4:0] $end
    $var wire 5 6 Rs2E [4:0] $end
    $var wire 32 [ InstrD [31:0] $end
    $scope module c $end
     $var wire 1 >! clk $end
     $var wire 1 ?! reset $end
     $var wire 7 \ op [6:0] $end
     $var wire 3 ] funct3 [2:0] $end
     $var wire 1 ^ funct7b5 $end
     $var wire 1 ( ZeroE $end
     $var wire 1 + l $end
     $var wire 1 ) ResultSrcE0 $end
     $var wire 2 - ResultSrcW [1:0] $end
     $var wire 1 B! MemWriteM $end
     $var wire 1 5! PCSrcE $end
     $var wire 1 % ALUSrcE $end
     $var wire 1 * loadW $end
     $var wire 1 , jarlW $end
     $var wire 1 & RegWriteW $end
     $var wire 1 ' RegWriteM $end
     $var wire 3 X ImmSrcD [2:0] $end
     $var wire 4 . ALUControlE [3:0] $end
     $var wire 2 / SDypeSecM [1:0] $end
     $var wire 1 9! FlushE $end
     $var wire 2 _ ALUOp [1:0] $end
     $var wire 2 ` ResultSrcD [1:0] $end
     $var wire 2 7 ResultSrcE [1:0] $end
     $var wire 2 8 ResultSrcM [1:0] $end
     $var wire 1 a BranchD $end
     $var wire 1 b JumpD $end
     $var wire 1 9 JumpE $end
     $var wire 1 c ALUSrcD $end
     $var wire 1 : BranchE $end
     $var wire 1 d jarlD $end
     $var wire 1 ; jarlE $end
     $var wire 1 < jarlM $end
     $var wire 4 e ALUControlD [3:0] $end
     $var wire 2 f SDypeSec [1:0] $end
     $var wire 2 = SDypeSecE [1:0] $end
     $var wire 3 > funct3E [2:0] $end
     $var wire 1 ? RegWriteE $end
     $var wire 1 g RegWriteD $end
     $var wire 1 @ MemWriteE $end
     $var wire 1 h MemWriteD $end
     $var wire 1 i loadD $end
     $var wire 1 A loadE $end
     $var wire 1 B loadM $end
     $var wire 1 C branchScr $end
     $scope module Ereg10 $end
      $var wire 32 I! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 2 ` d [1:0] $end
      $var wire 2 7 q [1:0] $end
     $upscope $end
     $scope module Ereg11 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 1 h d [0:0] $end
      $var wire 1 @ q [0:0] $end
     $upscope $end
     $scope module Ereg12 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 1 b d [0:0] $end
      $var wire 1 9 q [0:0] $end
     $upscope $end
     $scope module Ereg13 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 1 a d [0:0] $end
      $var wire 1 : q [0:0] $end
     $upscope $end
     $scope module Ereg14 $end
      $var wire 32 K! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 4 e d [3:0] $end
      $var wire 4 . q [3:0] $end
     $upscope $end
     $scope module Ereg15 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 1 c d [0:0] $end
      $var wire 1 % q [0:0] $end
     $upscope $end
     $scope module Ereg16 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 1 i d [0:0] $end
      $var wire 1 A q [0:0] $end
     $upscope $end
     $scope module Ereg17 $end
      $var wire 32 I! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 2 f d [1:0] $end
      $var wire 2 = q [1:0] $end
     $upscope $end
     $scope module Ereg18 $end
      $var wire 32 L! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 3 ] d [2:0] $end
      $var wire 3 > q [2:0] $end
     $upscope $end
     $scope module Ereg19 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 1 d d [0:0] $end
      $var wire 1 ; q [0:0] $end
     $upscope $end
     $scope module Ereg9 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 1 g d [0:0] $end
      $var wire 1 ? q [0:0] $end
     $upscope $end
     $scope module Mreg10 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 ; d [0:0] $end
      $var wire 1 < q [0:0] $end
     $upscope $end
     $scope module Mreg5 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 ? d [0:0] $end
      $var wire 1 ' q [0:0] $end
     $upscope $end
     $scope module Mreg6 $end
      $var wire 32 I! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 2 7 d [1:0] $end
      $var wire 2 8 q [1:0] $end
     $upscope $end
     $scope module Mreg7 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 @ d [0:0] $end
      $var wire 1 B! q [0:0] $end
     $upscope $end
     $scope module Mreg8 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 A d [0:0] $end
      $var wire 1 B q [0:0] $end
     $upscope $end
     $scope module Mreg9 $end
      $var wire 32 I! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 2 = d [1:0] $end
      $var wire 2 / q [1:0] $end
     $upscope $end
     $scope module SD $end
      $var wire 3 ] funct3 [2:0] $end
      $var wire 2 f SDypeSec [1:0] $end
     $upscope $end
     $scope module Wreg5 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 ' d [0:0] $end
      $var wire 1 & q [0:0] $end
     $upscope $end
     $scope module Wreg6 $end
      $var wire 32 I! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 2 8 d [1:0] $end
      $var wire 2 - q [1:0] $end
     $upscope $end
     $scope module Wreg7 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 B d [0:0] $end
      $var wire 1 * q [0:0] $end
     $upscope $end
     $scope module Wreg8 $end
      $var wire 32 J! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 < d [0:0] $end
      $var wire 1 , q [0:0] $end
     $upscope $end
     $scope module ad $end
      $var wire 1 j opb5 $end
      $var wire 3 ] funct3 [2:0] $end
      $var wire 1 ^ funct7b5 $end
      $var wire 2 _ ALUOp [1:0] $end
      $var wire 4 e ALUControl [3:0] $end
      $var wire 1 k RtypeSub $end
      $var wire 1 k RtypeSra $end
     $upscope $end
     $scope module blu $end
      $var wire 3 > funct3 [2:0] $end
      $var wire 1 ( l $end
      $var wire 1 + Zero $end
      $var wire 1 C conti $end
     $upscope $end
     $scope module md $end
      $var wire 7 \ op [6:0] $end
      $var wire 2 ` ResultSrcD [1:0] $end
      $var wire 1 h MemWriteD $end
      $var wire 1 a BranchD $end
      $var wire 1 c ALUSrcD $end
      $var wire 1 g RegWriteD $end
      $var wire 1 b JumpD $end
      $var wire 1 i load $end
      $var wire 1 d jarl $end
      $var wire 3 X ImmSrcD [2:0] $end
      $var wire 2 _ ALUOp [1:0] $end
      $var wire 14 l controls [13:0] $end
     $upscope $end
    $upscope $end
    $scope module dp $end
     $var wire 1 >! clk $end
     $var wire 1 ?! reset $end
     $var wire 2 - ResultSrc [1:0] $end
     $var wire 1 5! PCSrc $end
     $var wire 1 % ALUSrc $end
     $var wire 1 & RegWrite $end
     $var wire 1 * loadW $end
     $var wire 1 , jarlW $end
     $var wire 3 X ImmSrc [2:0] $end
     $var wire 4 . ALUControl [3:0] $end
     $var wire 2 / SDypeSecM [1:0] $end
     $var wire 1 ( Zero $end
     $var wire 1 + l $end
     $var wire 32 3! PCF [31:0] $end
     $var wire 32 4! Instr [31:0] $end
     $var wire 32 A! ALUResultM [31:0] $end
     $var wire 32 @! WriteData [31:0] $end
     $var wire 32 # ReadData [31:0] $end
     $var wire 1 7! stallD $end
     $var wire 1 8! stallF $end
     $var wire 1 5! FlushD $end
     $var wire 1 9! FlushE $end
     $var wire 2 0 ForWordAE [1:0] $end
     $var wire 2 1 ForWordBE [1:0] $end
     $var wire 5 2 RdW [4:0] $end
     $var wire 5 3 RdM [4:0] $end
     $var wire 5 4 RdE [4:0] $end
     $var wire 5 Y Rs1D [4:0] $end
     $var wire 5 Z Rs2D [4:0] $end
     $var wire 5 5 Rs1E [4:0] $end
     $var wire 5 6 Rs2E [4:0] $end
     $var wire 32 [ InstrD [31:0] $end
     $var wire 32 $ mask [31:0] $end
     $var wire 32 D! PCFNext [31:0] $end
     $var wire 32 6! PCPlus4F [31:0] $end
     $var wire 32 D PCTargetE [31:0] $end
     $var wire 32 E PCD [31:0] $end
     $var wire 32 m PCPlus4D [31:0] $end
     $var wire 32 F PCE [31:0] $end
     $var wire 32 G PCPlus4E [31:0] $end
     $var wire 32 H PCPlus4M [31:0] $end
     $var wire 32 I PCPlus4W [31:0] $end
     $var wire 32 J PCJamp [31:0] $end
     $var wire 32 n ImmExtD [31:0] $end
     $var wire 32 K ImmExtE [31:0] $end
     $var wire 32 L ALUResult [31:0] $end
     $var wire 32 M ALUResultW [31:0] $end
     $var wire 32 N WriteDataM [31:0] $end
     $var wire 32 O SrcAE [31:0] $end
     $var wire 32 P SrcBE [31:0] $end
     $var wire 32 E! RD1D [31:0] $end
     $var wire 32 F! RD2D [31:0] $end
     $var wire 32 Q RD1E [31:0] $end
     $var wire 32 R RD2E [31:0] $end
     $var wire 5 o RdD [4:0] $end
     $var wire 32 S ResultW [31:0] $end
     $var wire 32 T WriteDataE [31:0] $end
     $var wire 32 U ReadDataW [31:0] $end
     $var wire 32 :! writeReg [31:0] $end
     $var wire 2 G! offset [1:0] $end
     $scope module Dreg1 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 N! reset $end
      $var wire 1 5! clr $end
      $var wire 1 ;! en $end
      $var wire 32 4! d [31:0] $end
      $var wire 32 [ q [31:0] $end
     $upscope $end
     $scope module Dreg2 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 5! clr $end
      $var wire 1 ;! en $end
      $var wire 32 3! d [31:0] $end
      $var wire 32 E q [31:0] $end
     $upscope $end
     $scope module Dreg3 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 N! reset $end
      $var wire 1 5! clr $end
      $var wire 1 ;! en $end
      $var wire 32 6! d [31:0] $end
      $var wire 32 m q [31:0] $end
     $upscope $end
     $scope module Ereg1 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 32 E d [31:0] $end
      $var wire 32 F q [31:0] $end
     $upscope $end
     $scope module Ereg2 $end
      $var wire 32 O! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 5 Y d [4:0] $end
      $var wire 5 5 q [4:0] $end
     $upscope $end
     $scope module Ereg3 $end
      $var wire 32 O! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 5 Z d [4:0] $end
      $var wire 5 6 q [4:0] $end
     $upscope $end
     $scope module Ereg4 $end
      $var wire 32 O! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 5 o d [4:0] $end
      $var wire 5 4 q [4:0] $end
     $upscope $end
     $scope module Ereg5 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 32 n d [31:0] $end
      $var wire 32 K q [31:0] $end
     $upscope $end
     $scope module Ereg6 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 32 m d [31:0] $end
      $var wire 32 G q [31:0] $end
     $upscope $end
     $scope module Ereg7 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 32 F! d [31:0] $end
      $var wire 32 R q [31:0] $end
     $upscope $end
     $scope module Ereg8 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 9! clr $end
      $var wire 32 E! d [31:0] $end
      $var wire 32 Q q [31:0] $end
     $upscope $end
     $scope module Mreg1 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 32 L d [31:0] $end
      $var wire 32 A! q [31:0] $end
     $upscope $end
     $scope module Mreg2 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 32 T d [31:0] $end
      $var wire 32 N q [31:0] $end
     $upscope $end
     $scope module Mreg3 $end
      $var wire 32 O! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 5 4 d [4:0] $end
      $var wire 5 3 q [4:0] $end
     $upscope $end
     $scope module Mreg4 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 32 G d [31:0] $end
      $var wire 32 H q [31:0] $end
     $upscope $end
     $scope module Wreg1 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 32 A! d [31:0] $end
      $var wire 32 M q [31:0] $end
     $upscope $end
     $scope module Wreg2 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 32 # d [31:0] $end
      $var wire 32 U q [31:0] $end
     $upscope $end
     $scope module Wreg3 $end
      $var wire 32 O! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 5 3 d [4:0] $end
      $var wire 5 2 q [4:0] $end
     $upscope $end
     $scope module Wreg4 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 32 H d [31:0] $end
      $var wire 32 I q [31:0] $end
     $upscope $end
     $scope module alu $end
      $var wire 32 O a [31:0] $end
      $var wire 32 P b [31:0] $end
      $var wire 4 . alucontrol [3:0] $end
      $var wire 32 L result [31:0] $end
      $var wire 1 ( zero $end
      $var wire 1 + l $end
      $var wire 32 V condinvb [31:0] $end
      $var wire 32 W sum [31:0] $end
     $upscope $end
     $scope module ext $end
      $var wire 25 p instr [31:7] $end
      $var wire 3 X immsrc [2:0] $end
      $var wire 32 n immext [31:0] $end
     $upscope $end
     $scope module lc $end
      $var wire 32 S ResultW [31:0] $end
      $var wire 3 ] funct3 [2:0] $end
      $var wire 1 * load $end
      $var wire 32 :! lData [31:0] $end
     $upscope $end
     $scope module pcadd4 $end
      $var wire 32 3! a [31:0] $end
      $var wire 32 P! b [31:0] $end
      $var wire 32 6! y [31:0] $end
     $upscope $end
     $scope module pcaddbranch $end
      $var wire 32 F a [31:0] $end
      $var wire 32 K b [31:0] $end
      $var wire 32 D y [31:0] $end
     $upscope $end
     $scope module pcmux $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 32 6! d0 [31:0] $end
      $var wire 32 J d1 [31:0] $end
      $var wire 1 5! s $end
      $var wire 32 D! y [31:0] $end
     $upscope $end
     $scope module pcmux2 $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 32 M d0 [31:0] $end
      $var wire 32 D d1 [31:0] $end
      $var wire 1 , s $end
      $var wire 32 J y [31:0] $end
     $upscope $end
     $scope module pcreg $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 1 >! clk $end
      $var wire 1 ?! reset $end
      $var wire 1 <! en $end
      $var wire 32 D! d [31:0] $end
      $var wire 32 3! q [31:0] $end
     $upscope $end
     $scope module resultmux $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 32 M d0 [31:0] $end
      $var wire 32 U d1 [31:0] $end
      $var wire 32 I d2 [31:0] $end
      $var wire 2 - s [1:0] $end
      $var wire 32 S y [31:0] $end
     $upscope $end
     $scope module rff $end
      $var wire 1 H! clk $end
      $var wire 1 & we3 $end
      $var wire 5 Y a1 [4:0] $end
      $var wire 5 Z a2 [4:0] $end
      $var wire 5 2 a3 [4:0] $end
      $var wire 32 :! wd3 [31:0] $end
      $var wire 32 E! rd1 [31:0] $end
      $var wire 32 F! rd2 [31:0] $end
      $var wire 32 q rf[0] [31:0] $end
      $var wire 32 r rf[1] [31:0] $end
      $var wire 32 s rf[2] [31:0] $end
      $var wire 32 t rf[3] [31:0] $end
      $var wire 32 u rf[4] [31:0] $end
      $var wire 32 v rf[5] [31:0] $end
      $var wire 32 w rf[6] [31:0] $end
      $var wire 32 x rf[7] [31:0] $end
      $var wire 32 y rf[8] [31:0] $end
      $var wire 32 z rf[9] [31:0] $end
      $var wire 32 { rf[10] [31:0] $end
      $var wire 32 | rf[11] [31:0] $end
      $var wire 32 } rf[12] [31:0] $end
      $var wire 32 ~ rf[13] [31:0] $end
      $var wire 32 !! rf[14] [31:0] $end
      $var wire 32 "! rf[15] [31:0] $end
      $var wire 32 #! rf[16] [31:0] $end
      $var wire 32 $! rf[17] [31:0] $end
      $var wire 32 %! rf[18] [31:0] $end
      $var wire 32 &! rf[19] [31:0] $end
      $var wire 32 '! rf[20] [31:0] $end
      $var wire 32 (! rf[21] [31:0] $end
      $var wire 32 )! rf[22] [31:0] $end
      $var wire 32 *! rf[23] [31:0] $end
      $var wire 32 +! rf[24] [31:0] $end
      $var wire 32 ,! rf[25] [31:0] $end
      $var wire 32 -! rf[26] [31:0] $end
      $var wire 32 .! rf[27] [31:0] $end
      $var wire 32 /! rf[28] [31:0] $end
      $var wire 32 0! rf[29] [31:0] $end
      $var wire 32 1! rf[30] [31:0] $end
      $var wire 32 2! rf[31] [31:0] $end
     $upscope $end
     $scope module srcAmux $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 32 Q d0 [31:0] $end
      $var wire 32 S d1 [31:0] $end
      $var wire 32 A! d2 [31:0] $end
      $var wire 2 0 s [1:0] $end
      $var wire 32 O y [31:0] $end
     $upscope $end
     $scope module srcBmux $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 32 R d0 [31:0] $end
      $var wire 32 S d1 [31:0] $end
      $var wire 32 A! d2 [31:0] $end
      $var wire 2 1 s [1:0] $end
      $var wire 32 T y [31:0] $end
     $upscope $end
     $scope module srcbmux $end
      $var wire 32 M! WIDTH [31:0] $end
      $var wire 32 T d0 [31:0] $end
      $var wire 32 K d1 [31:0] $end
      $var wire 1 % s $end
      $var wire 32 P y [31:0] $end
     $upscope $end
     $scope module wc $end
      $var wire 32 N WriteDataM [31:0] $end
      $var wire 2 / WDypesrc [1:0] $end
      $var wire 2 G! a [1:0] $end
      $var wire 32 $ write_mask [31:0] $end
      $var wire 32 @! WData [31:0] $end
     $upscope $end
    $upscope $end
    $scope module hu $end
     $var wire 1 & RegWriteW $end
     $var wire 1 ' RegWriteM $end
     $var wire 5 2 rdw [4:0] $end
     $var wire 5 3 rdm [4:0] $end
     $var wire 5 4 rde [4:0] $end
     $var wire 1 ) ResultSrcE0 $end
     $var wire 1 5! PCsrc $end
     $var wire 5 5 rs1e [4:0] $end
     $var wire 5 6 rs2e [4:0] $end
     $var wire 5 Y rs1d [4:0] $end
     $var wire 5 Z rs2d [4:0] $end
     $var wire 2 0 forwardae [1:0] $end
     $var wire 2 1 forwardbe [1:0] $end
     $var wire 1 9! flushe $end
     $var wire 1 5! flushd $end
     $var wire 1 8! stallf $end
     $var wire 1 7! stalld $end
     $var wire 1 =! lwStall $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b00000000000000000000000000000000 #
b11111111111111111111111111111111 $
0%
0&
0'
1(
0)
0*
0+
0,
b00 -
b0000 .
b00 /
b00 0
b00 1
b00000 2
b00000 3
b00000 4
b00000 5
b00000 6
b00 7
b00 8
09
0:
0;
0<
b00 =
b000 >
0?
0@
0A
0B
0C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b000 X
b00000 Y
b00000 Z
b00000000000000000000000000000000 [
b0000000 \
b000 ]
0^
b00 _
b00 `
0a
0b
0c
0d
b0000 e
b00 f
0g
0h
0i
0j
0k
b00000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000 o
b0000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b00000000000000000000000000000000 v
b00000000000000000000000000000000 w
b00000000000000000000000000000000 x
b00000000000000000000000000000000 y
b00000000000000000000000000000000 z
b00000000000000000000000000000000 {
b00000000000000000000000000000000 |
b00000000000000000000000000000000 }
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
b00000000000000000000000000000000 &!
b00000000000000000000000000000000 '!
b00000000000000000000000000000000 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b00000000000000000000000000000000 1!
b00000000000000000000000000000000 2!
b00000000000000000000000000000000 3!
b00000000010100000000000100010011 4!
05!
b00000000000000000000000000000100 6!
07!
08!
09!
b00000000000000000000000000000000 :!
1;!
1<!
0=!
1>!
0?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
0B!
b00000000000000000000000000000000 C!
b00000000000000000000000000000100 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
b00 G!
0H!
b00000000000000000000000000000010 I!
b00000000000000000000000000000001 J!
b00000000000000000000000000000100 K!
b00000000000000000000000000000011 L!
b00000000000000000000000000100000 M!
0N!
b00000000000000000000000000000101 O!
b00000000000000000000000000000100 P!
#2
b00101 Z
b00000000010100000000000100010011 [
b0010011 \
b10 _
1c
1g
b10001000010000 l
b00000000000000000000000000000100 m
b00000000000000000000000000000101 n
b00010 o
b0000000001010000000000010 p
b00000000000000000000000000000100 3!
b00000000110000000000000110010011 4!
b00000000000000000000000000001000 6!
b00000000000000000000000000001000 D!
#3
0>!
1H!
#4
1%
0(
b00010 4
b00101 6
1?
b00000000000000000000000000000101 D
b00000000000000000000000000000100 E
b00000000000000000000000000000100 G
b00000000000000000000000000000101 K
b00000000000000000000000000000101 L
b00000000000000000000000000000101 P
b00000000000000000000000000000101 V
b00000000000000000000000000000101 W
b01100 Z
b00000000110000000000000110010011 [
b00000000000000000000000000001000 m
b00000000000000000000000000001100 n
b00011 o
b0000000011000000000000011 p
b00000000000000000000000000001000 3!
b11111111011100011000001110010011 4!
b00000000000000000000000000001100 6!
1>!
b00000000000000000000000000001100 D!
0H!
#5
0>!
1H!
#6
1'
b00010 3
b00011 4
b01100 6
b00000000000000000000000000010000 D
b00000000000000000000000000001000 E
b00000000000000000000000000000100 F
b00000000000000000000000000001000 G
b00000000000000000000000000000100 H
b00000000000000000000000000001100 K
b00000000000000000000000000001100 L
b00000000000000000000000000001100 P
b00000000000000000000000000001100 V
b00000000000000000000000000001100 W
b00011 Y
b10111 Z
b11111111011100011000001110010011 [
1^
b00000000000000000000000000001100 m
b11111111111111111111111111110111 n
b00111 o
b1111111101110001100000111 p
b00000000000000000000000000001100 3!
b00000000001000111110001000110011 4!
b00000000000000000000000000010000 6!
1>!
b00000000000000000000000000000101 A!
b00000000000000000000000000010000 D!
b01 G!
0H!
