$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 O! clk $end
  $var wire 1 P! reset $end
  $var wire 32 Q! WriteData [31:0] $end
  $var wire 32 R! DataAdr [31:0] $end
  $var wire 1 S! MemWrite $end
  $scope module rv32i $end
   $var wire 1 O! clk $end
   $var wire 1 P! reset $end
   $var wire 32 Q! WriteData [31:0] $end
   $var wire 32 R! DataAdr [31:0] $end
   $var wire 1 S! MemWrite $end
   $var wire 32 r PC_m [31:0] $end
   $var wire 32 s PC_s [31:0] $end
   $var wire 32 O Instr_s [31:0] $end
   $var wire 32 T! Instr_m [31:0] $end
   $var wire 32 t ReadData [31:0] $end
   $var wire 32 U! mask [31:0] $end
   $var wire 32 # write_d [31:0] $end
   $var wire 1 u re $end
   $scope module axi $end
    $var wire 1 O! clk $end
    $var wire 1 P! rst $end
    $var wire 32 # write_data_s [31:0] $end
    $var wire 32 r addr_m [31:0] $end
    $var wire 32 `! write_data_m [31:0] $end
    $var wire 1 a! wen $end
    $var wire 1 b! ren $end
    $var wire 1 u ren_s $end
    $var wire 32 O read_data_s [31:0] $end
    $var wire 32 T! read_data_m [31:0] $end
    $var wire 32 s addr_s [31:0] $end
    $var wire 32 v m2s_ARADDR [31:0] $end
    $var wire 1 w m2s_ARVALID $end
    $var wire 1 x s2m_ARREADY $end
    $var wire 32 $ s2m_RDATA [31:0] $end
    $var wire 1 % s2m_RVALID $end
    $var wire 1 & m2s_RREADY $end
    $var wire 32 ' m2s_AWADDR [31:0] $end
    $var wire 1 ( m2s_AWVALID $end
    $var wire 1 ) s2m_AWREADY $end
    $var wire 32 * addr_w [31:0] $end
    $var wire 32 s addr_r [31:0] $end
    $var wire 32 + m2s_WDATA [31:0] $end
    $var wire 1 , m2s_WVALID $end
    $var wire 1 - s2m_WREADY $end
    $var wire 1 c! s2m_BVALID $end
    $var wire 1 . m2s_BREADY $end
    $scope module axi2mem $end
     $var wire 1 O! ACLK $end
     $var wire 1 P! ARESETN $end
     $var wire 32 s addr [31:0] $end
     $var wire 32 O read_data [31:0] $end
     $var wire 32 # write_data [31:0] $end
     $var wire 32 * addr_w [31:0] $end
     $var wire 1 u ren $end
     $var wire 32 v ARADDR [31:0] $end
     $var wire 1 w ARVALID $end
     $var wire 1 x ARREADY $end
     $var wire 32 $ RDATA [31:0] $end
     $var wire 1 % RVALID $end
     $var wire 1 & RREADY $end
     $var wire 32 ' AWADDR [31:0] $end
     $var wire 1 ( AWVALID $end
     $var wire 1 ) AWREADY $end
     $var wire 32 + WDATA [31:0] $end
     $var wire 1 , WVALID $end
     $var wire 1 - WREADY $end
     $var wire 1 c! BVALID $end
     $var wire 1 . BREADY $end
     $var wire 1 x r_ARREADY $end
     $var wire 1 % r_RVALID $end
     $var wire 1 ) r_AWREADY $end
     $var wire 1 - r_WREADY $end
     $var wire 1 / r_BVALID $end
    $upscope $end
    $scope module cpu2axi $end
     $var wire 1 O! ACLK $end
     $var wire 1 P! ARESETN $end
     $var wire 32 r read_address [31:0] $end
     $var wire 1 a! write_start $end
     $var wire 1 b! read_start $end
     $var wire 32 T! read_data [31:0] $end
     $var wire 32 `! write_data [31:0] $end
     $var wire 32 v ARADDR [31:0] $end
     $var wire 1 w ARVALID $end
     $var wire 1 x ARREADY $end
     $var wire 32 $ RDATA [31:0] $end
     $var wire 1 % RVALID $end
     $var wire 1 & RREADY $end
     $var wire 32 ' AWADDR [31:0] $end
     $var wire 1 ( AWVALID $end
     $var wire 1 ) AWREADY $end
     $var wire 32 + WDATA [31:0] $end
     $var wire 1 , WVALID $end
     $var wire 1 - WREADY $end
     $var wire 1 c! BVALID $end
     $var wire 1 . BREADY $end
     $var wire 1 w r_ARVALID $end
     $var wire 32 + r_WDATA [31:0] $end
     $var wire 32 T! r_RDATA [31:0] $end
     $var wire 32 ' r_AWADDR [31:0] $end
     $var wire 1 ( r_AWVALID $end
     $var wire 32 v r_ARADDR [31:0] $end
     $var wire 1 . r_BREADY $end
     $var wire 1 , r_WVALID $end
     $var wire 1 & r_RREADY $end
    $upscope $end
    $scope module mux_addr $end
     $var wire 32 d! WIDTH [31:0] $end
     $var wire 32 `! d0 [31:0] $end
     $var wire 32 * d1 [31:0] $end
     $var wire 32 s d2 [31:0] $end
     $var wire 32 `! d3 [31:0] $end
     $var wire 2 e! s [1:0] $end
     $var wire 32 s y [31:0] $end
    $upscope $end
   $upscope $end
   $scope module dmem $end
    $var wire 1 O! clk $end
    $var wire 1 S! we $end
    $var wire 32 R! a [31:0] $end
    $var wire 32 Q! wd [31:0] $end
    $var wire 32 U! write_mask [31:0] $end
    $var wire 32 t rd [31:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 P masked_data [31:0] $end
    $upscope $end
   $upscope $end
   $scope module imem $end
    $var wire 1 O! clk $end
    $var wire 1 u re $end
    $var wire 32 s a [31:0] $end
    $var wire 32 O rd [31:0] $end
   $upscope $end
   $scope module rv $end
    $var wire 1 O! clk $end
    $var wire 1 P! reset $end
    $var wire 32 r PCF [31:0] $end
    $var wire 32 T! Instr [31:0] $end
    $var wire 1 S! MemWrite $end
    $var wire 32 R! ALUResultM [31:0] $end
    $var wire 32 Q! WriteData [31:0] $end
    $var wire 32 U! mask [31:0] $end
    $var wire 32 t ReadData [31:0] $end
    $var wire 1 0 ALUSrcE $end
    $var wire 1 y RegWriteW $end
    $var wire 1 z RegWriteM $end
    $var wire 1 { Zero $end
    $var wire 1 I! stallD $end
    $var wire 1 J! stallF $end
    $var wire 1 V! FlushD $end
    $var wire 1 K! FlushE $end
    $var wire 2 1 ResultSrcE [1:0] $end
    $var wire 1 2 loadW $end
    $var wire 1 W! less $end
    $var wire 1 3 jarlW $end
    $var wire 1 V! PCSrcE $end
    $var wire 2 4 ResultSrcW [1:0] $end
    $var wire 2 5 ResultSrcM [1:0] $end
    $var wire 3 1! ImmSrcD [2:0] $end
    $var wire 4 6 ALUControlE [3:0] $end
    $var wire 2 | SDypeSecM [1:0] $end
    $var wire 2 } ForWordAE [1:0] $end
    $var wire 2 ~ ForWordBE [1:0] $end
    $var wire 5 !! RdW [4:0] $end
    $var wire 5 "! RdM [4:0] $end
    $var wire 5 #! RdE [4:0] $end
    $var wire 5 2! Rs1D [4:0] $end
    $var wire 5 3! Rs2D [4:0] $end
    $var wire 5 7 Rs1E [4:0] $end
    $var wire 5 8 Rs2E [4:0] $end
    $var wire 32 4! InstrD [31:0] $end
    $scope module c $end
     $var wire 1 O! clk $end
     $var wire 1 P! reset $end
     $var wire 7 5! op [6:0] $end
     $var wire 3 6! funct3 [2:0] $end
     $var wire 1 7! funct7b5 $end
     $var wire 1 { ZeroE $end
     $var wire 1 W! l $end
     $var wire 2 1 ResultSrcE [1:0] $end
     $var wire 2 4 ResultSrcW [1:0] $end
     $var wire 2 5 ResultSrcM [1:0] $end
     $var wire 1 S! MemWriteM $end
     $var wire 1 V! PCSrcE $end
     $var wire 1 0 ALUSrcE $end
     $var wire 1 2 loadW $end
     $var wire 1 3 jarlW $end
     $var wire 1 y RegWriteW $end
     $var wire 1 z RegWriteM $end
     $var wire 3 1! ImmSrcD [2:0] $end
     $var wire 4 6 ALUControlE [3:0] $end
     $var wire 2 | SDypeSecM [1:0] $end
     $var wire 1 K! FlushE $end
     $var wire 2 8! ALUOp [1:0] $end
     $var wire 2 9! ResultSrcD [1:0] $end
     $var wire 1 :! BranchD $end
     $var wire 1 ;! JumpD $end
     $var wire 1 9 JumpE $end
     $var wire 1 <! ALUSrcD $end
     $var wire 1 : BranchE $end
     $var wire 1 =! jarlD $end
     $var wire 1 ; jarlE $end
     $var wire 1 < jarlM $end
     $var wire 4 >! ALUControlD [3:0] $end
     $var wire 2 ?! SDypeSec [1:0] $end
     $var wire 2 $! SDypeSecE [1:0] $end
     $var wire 3 = funct3E [2:0] $end
     $var wire 1 %! RegWriteE $end
     $var wire 1 @! RegWriteD $end
     $var wire 1 &! MemWriteE $end
     $var wire 1 A! MemWriteD $end
     $var wire 1 B! loadD $end
     $var wire 1 > loadE $end
     $var wire 1 ? loadM $end
     $var wire 1 '! branchScr $end
     $scope module Ereg10 $end
      $var wire 32 f! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 2 9! d [1:0] $end
      $var wire 2 1 q [1:0] $end
     $upscope $end
     $scope module Ereg11 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 1 A! d [0:0] $end
      $var wire 1 &! q [0:0] $end
     $upscope $end
     $scope module Ereg12 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 1 ;! d [0:0] $end
      $var wire 1 9 q [0:0] $end
     $upscope $end
     $scope module Ereg13 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 1 :! d [0:0] $end
      $var wire 1 : q [0:0] $end
     $upscope $end
     $scope module Ereg14 $end
      $var wire 32 h! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 4 >! d [3:0] $end
      $var wire 4 6 q [3:0] $end
     $upscope $end
     $scope module Ereg15 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 1 <! d [0:0] $end
      $var wire 1 0 q [0:0] $end
     $upscope $end
     $scope module Ereg16 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 1 B! d [0:0] $end
      $var wire 1 > q [0:0] $end
     $upscope $end
     $scope module Ereg17 $end
      $var wire 32 f! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 2 ?! d [1:0] $end
      $var wire 2 $! q [1:0] $end
     $upscope $end
     $scope module Ereg18 $end
      $var wire 32 i! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 3 6! d [2:0] $end
      $var wire 3 = q [2:0] $end
     $upscope $end
     $scope module Ereg19 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 1 =! d [0:0] $end
      $var wire 1 ; q [0:0] $end
     $upscope $end
     $scope module Ereg9 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 1 @! d [0:0] $end
      $var wire 1 %! q [0:0] $end
     $upscope $end
     $scope module Mreg10 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 ; d [0:0] $end
      $var wire 1 < q [0:0] $end
     $upscope $end
     $scope module Mreg5 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 %! d [0:0] $end
      $var wire 1 z q [0:0] $end
     $upscope $end
     $scope module Mreg6 $end
      $var wire 32 f! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 2 1 d [1:0] $end
      $var wire 2 5 q [1:0] $end
     $upscope $end
     $scope module Mreg7 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 &! d [0:0] $end
      $var wire 1 S! q [0:0] $end
     $upscope $end
     $scope module Mreg8 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 > d [0:0] $end
      $var wire 1 ? q [0:0] $end
     $upscope $end
     $scope module Mreg9 $end
      $var wire 32 f! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 2 $! d [1:0] $end
      $var wire 2 | q [1:0] $end
     $upscope $end
     $scope module SD $end
      $var wire 3 6! funct3 [2:0] $end
      $var wire 2 ?! SDypeSec [1:0] $end
     $upscope $end
     $scope module Wreg5 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 z d [0:0] $end
      $var wire 1 y q [0:0] $end
     $upscope $end
     $scope module Wreg6 $end
      $var wire 32 f! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 2 5 d [1:0] $end
      $var wire 2 4 q [1:0] $end
     $upscope $end
     $scope module Wreg7 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 ? d [0:0] $end
      $var wire 1 2 q [0:0] $end
     $upscope $end
     $scope module Wreg8 $end
      $var wire 32 g! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 < d [0:0] $end
      $var wire 1 3 q [0:0] $end
     $upscope $end
     $scope module ad $end
      $var wire 1 C! opb5 $end
      $var wire 3 6! funct3 [2:0] $end
      $var wire 1 7! funct7b5 $end
      $var wire 2 8! ALUOp [1:0] $end
      $var wire 4 >! ALUControl [3:0] $end
      $var wire 1 D! RtypeSub $end
      $var wire 1 D! RtypeSra $end
     $upscope $end
     $scope module blu $end
      $var wire 3 = funct3 [2:0] $end
      $var wire 1 { l $end
      $var wire 1 W! Zero $end
      $var wire 1 '! conti $end
     $upscope $end
     $scope module md $end
      $var wire 7 5! op [6:0] $end
      $var wire 2 9! ResultSrcD [1:0] $end
      $var wire 1 A! MemWriteD $end
      $var wire 1 :! BranchD $end
      $var wire 1 <! ALUSrcD $end
      $var wire 1 @! RegWriteD $end
      $var wire 1 ;! JumpD $end
      $var wire 1 B! load $end
      $var wire 1 =! jarl $end
      $var wire 3 1! ImmSrcD [2:0] $end
      $var wire 2 8! ALUOp [1:0] $end
      $var wire 14 E! controls [13:0] $end
     $upscope $end
    $upscope $end
    $scope module dp $end
     $var wire 1 O! clk $end
     $var wire 1 P! reset $end
     $var wire 2 4 ResultSrc [1:0] $end
     $var wire 1 V! PCSrc $end
     $var wire 1 0 ALUSrc $end
     $var wire 1 y RegWrite $end
     $var wire 1 2 loadW $end
     $var wire 1 3 jarlW $end
     $var wire 3 1! ImmSrc [2:0] $end
     $var wire 4 6 ALUControl [3:0] $end
     $var wire 2 | SDypeSecM [1:0] $end
     $var wire 1 { Zero $end
     $var wire 1 W! l $end
     $var wire 32 r PCF [31:0] $end
     $var wire 32 T! Instr [31:0] $end
     $var wire 32 R! ALUResultM [31:0] $end
     $var wire 32 Q! WriteData [31:0] $end
     $var wire 32 t ReadData [31:0] $end
     $var wire 1 I! stallD $end
     $var wire 1 J! stallF $end
     $var wire 1 V! FlushD $end
     $var wire 1 K! FlushE $end
     $var wire 2 } ForWordAE [1:0] $end
     $var wire 2 ~ ForWordBE [1:0] $end
     $var wire 5 !! RdW [4:0] $end
     $var wire 5 "! RdM [4:0] $end
     $var wire 5 #! RdE [4:0] $end
     $var wire 5 2! Rs1D [4:0] $end
     $var wire 5 3! Rs2D [4:0] $end
     $var wire 5 7 Rs1E [4:0] $end
     $var wire 5 8 Rs2E [4:0] $end
     $var wire 32 4! InstrD [31:0] $end
     $var wire 32 U! mask [31:0] $end
     $var wire 32 X! PCFNext [31:0] $end
     $var wire 32 (! PCPlus4F [31:0] $end
     $var wire 32 )! PCTargetE [31:0] $end
     $var wire 32 @ PCTargetW [31:0] $end
     $var wire 32 A PCTargetM [31:0] $end
     $var wire 32 *! PCD [31:0] $end
     $var wire 32 Q PCPlus4D [31:0] $end
     $var wire 32 +! PCE [31:0] $end
     $var wire 32 B PCPlus4E [31:0] $end
     $var wire 32 C PCPlus4M [31:0] $end
     $var wire 32 D PCPlus4W [31:0] $end
     $var wire 32 Y! PCJamp [31:0] $end
     $var wire 32 F! ImmExtD [31:0] $end
     $var wire 32 E ImmExtE [31:0] $end
     $var wire 32 ,! ALUResult [31:0] $end
     $var wire 32 F ALUResultW [31:0] $end
     $var wire 32 G WriteDataM [31:0] $end
     $var wire 32 -! SrcAE [31:0] $end
     $var wire 32 .! SrcBE [31:0] $end
     $var wire 32 Z! RD1D [31:0] $end
     $var wire 32 [! RD2D [31:0] $end
     $var wire 32 H RD1E [31:0] $end
     $var wire 32 I RD2E [31:0] $end
     $var wire 5 G! RdD [4:0] $end
     $var wire 32 J ResultW [31:0] $end
     $var wire 32 /! WriteDataE [31:0] $end
     $var wire 32 K ReadDataW [31:0] $end
     $var wire 32 0! writeReg [31:0] $end
     $var wire 2 \! offset [1:0] $end
     $var wire 3 6! fun3D [2:0] $end
     $var wire 3 L fun3E [2:0] $end
     $var wire 3 M fun3M [2:0] $end
     $var wire 3 N fun3W [2:0] $end
     $scope module Dreg1 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 a! reset $end
      $var wire 1 V! clr $end
      $var wire 1 L! en $end
      $var wire 32 T! d [31:0] $end
      $var wire 32 4! q [31:0] $end
     $upscope $end
     $scope module Dreg2 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 V! clr $end
      $var wire 1 L! en $end
      $var wire 32 r d [31:0] $end
      $var wire 32 *! q [31:0] $end
     $upscope $end
     $scope module Dreg3 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 a! reset $end
      $var wire 1 V! clr $end
      $var wire 1 L! en $end
      $var wire 32 (! d [31:0] $end
      $var wire 32 Q q [31:0] $end
     $upscope $end
     $scope module Ereg1 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 32 *! d [31:0] $end
      $var wire 32 +! q [31:0] $end
     $upscope $end
     $scope module Ereg2 $end
      $var wire 32 j! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 5 2! d [4:0] $end
      $var wire 5 7 q [4:0] $end
     $upscope $end
     $scope module Ereg3 $end
      $var wire 32 j! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 5 3! d [4:0] $end
      $var wire 5 8 q [4:0] $end
     $upscope $end
     $scope module Ereg4 $end
      $var wire 32 j! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 5 G! d [4:0] $end
      $var wire 5 #! q [4:0] $end
     $upscope $end
     $scope module Ereg5 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 32 F! d [31:0] $end
      $var wire 32 E q [31:0] $end
     $upscope $end
     $scope module Ereg6 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 32 Q d [31:0] $end
      $var wire 32 B q [31:0] $end
     $upscope $end
     $scope module Ereg7 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 32 [! d [31:0] $end
      $var wire 32 I q [31:0] $end
     $upscope $end
     $scope module Ereg8 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 32 Z! d [31:0] $end
      $var wire 32 H q [31:0] $end
     $upscope $end
     $scope module Ereg_FUN3 $end
      $var wire 32 i! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 K! clr $end
      $var wire 3 6! d [2:0] $end
      $var wire 3 L q [2:0] $end
     $upscope $end
     $scope module Mreg1 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 32 ,! d [31:0] $end
      $var wire 32 R! q [31:0] $end
     $upscope $end
     $scope module Mreg11 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 32 )! d [31:0] $end
      $var wire 32 A q [31:0] $end
     $upscope $end
     $scope module Mreg2 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 32 /! d [31:0] $end
      $var wire 32 G q [31:0] $end
     $upscope $end
     $scope module Mreg3 $end
      $var wire 32 j! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 5 #! d [4:0] $end
      $var wire 5 "! q [4:0] $end
     $upscope $end
     $scope module Mreg4 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 32 B d [31:0] $end
      $var wire 32 C q [31:0] $end
     $upscope $end
     $scope module Mreg_FUN3 $end
      $var wire 32 i! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 3 L d [2:0] $end
      $var wire 3 M q [2:0] $end
     $upscope $end
     $scope module Wreg1 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 32 R! d [31:0] $end
      $var wire 32 F q [31:0] $end
     $upscope $end
     $scope module Wreg2 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 32 t d [31:0] $end
      $var wire 32 K q [31:0] $end
     $upscope $end
     $scope module Wreg3 $end
      $var wire 32 j! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 5 "! d [4:0] $end
      $var wire 5 !! q [4:0] $end
     $upscope $end
     $scope module Wreg4 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 32 C d [31:0] $end
      $var wire 32 D q [31:0] $end
     $upscope $end
     $scope module Wreg9 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 32 A d [31:0] $end
      $var wire 32 @ q [31:0] $end
     $upscope $end
     $scope module Wreg_FUN3 $end
      $var wire 32 i! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 3 M d [2:0] $end
      $var wire 3 N q [2:0] $end
     $upscope $end
     $scope module alu $end
      $var wire 32 -! a [31:0] $end
      $var wire 32 .! b [31:0] $end
      $var wire 4 6 alucontrol [3:0] $end
      $var wire 32 ,! result [31:0] $end
      $var wire 1 { zero $end
      $var wire 1 W! l $end
      $var wire 32 ]! condinvb [31:0] $end
      $var wire 32 ^! sum [31:0] $end
     $upscope $end
     $scope module ext $end
      $var wire 25 H! instr [31:7] $end
      $var wire 3 1! immsrc [2:0] $end
      $var wire 32 F! immext [31:0] $end
     $upscope $end
     $scope module lc $end
      $var wire 32 J ResultW [31:0] $end
      $var wire 3 N funct3 [2:0] $end
      $var wire 1 2 load $end
      $var wire 32 0! lData [31:0] $end
     $upscope $end
     $scope module pcadd4 $end
      $var wire 32 r a [31:0] $end
      $var wire 32 k! b [31:0] $end
      $var wire 32 (! y [31:0] $end
     $upscope $end
     $scope module pcaddbranch $end
      $var wire 32 +! a [31:0] $end
      $var wire 32 E b [31:0] $end
      $var wire 32 )! y [31:0] $end
     $upscope $end
     $scope module pcmux $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 32 (! d0 [31:0] $end
      $var wire 32 Y! d1 [31:0] $end
      $var wire 1 V! s $end
      $var wire 32 X! y [31:0] $end
     $upscope $end
     $scope module pcmux2 $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 32 )! d0 [31:0] $end
      $var wire 32 F d1 [31:0] $end
      $var wire 1 3 s $end
      $var wire 32 Y! y [31:0] $end
     $upscope $end
     $scope module pcreg $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 1 O! clk $end
      $var wire 1 P! reset $end
      $var wire 1 M! en $end
      $var wire 32 X! d [31:0] $end
      $var wire 32 r q [31:0] $end
     $upscope $end
     $scope module resultmux $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 32 F d0 [31:0] $end
      $var wire 32 K d1 [31:0] $end
      $var wire 32 D d2 [31:0] $end
      $var wire 32 @ d3 [31:0] $end
      $var wire 2 4 s [1:0] $end
      $var wire 32 J y [31:0] $end
     $upscope $end
     $scope module rff $end
      $var wire 1 _! clk $end
      $var wire 1 y we3 $end
      $var wire 5 2! a1 [4:0] $end
      $var wire 5 3! a2 [4:0] $end
      $var wire 5 !! a3 [4:0] $end
      $var wire 32 0! wd3 [31:0] $end
      $var wire 32 Z! rd1 [31:0] $end
      $var wire 32 [! rd2 [31:0] $end
      $var wire 32 R rf[0] [31:0] $end
      $var wire 32 S rf[1] [31:0] $end
      $var wire 32 T rf[2] [31:0] $end
      $var wire 32 U rf[3] [31:0] $end
      $var wire 32 V rf[4] [31:0] $end
      $var wire 32 W rf[5] [31:0] $end
      $var wire 32 X rf[6] [31:0] $end
      $var wire 32 Y rf[7] [31:0] $end
      $var wire 32 Z rf[8] [31:0] $end
      $var wire 32 [ rf[9] [31:0] $end
      $var wire 32 \ rf[10] [31:0] $end
      $var wire 32 ] rf[11] [31:0] $end
      $var wire 32 ^ rf[12] [31:0] $end
      $var wire 32 _ rf[13] [31:0] $end
      $var wire 32 ` rf[14] [31:0] $end
      $var wire 32 a rf[15] [31:0] $end
      $var wire 32 b rf[16] [31:0] $end
      $var wire 32 c rf[17] [31:0] $end
      $var wire 32 d rf[18] [31:0] $end
      $var wire 32 e rf[19] [31:0] $end
      $var wire 32 f rf[20] [31:0] $end
      $var wire 32 g rf[21] [31:0] $end
      $var wire 32 h rf[22] [31:0] $end
      $var wire 32 i rf[23] [31:0] $end
      $var wire 32 j rf[24] [31:0] $end
      $var wire 32 k rf[25] [31:0] $end
      $var wire 32 l rf[26] [31:0] $end
      $var wire 32 m rf[27] [31:0] $end
      $var wire 32 n rf[28] [31:0] $end
      $var wire 32 o rf[29] [31:0] $end
      $var wire 32 p rf[30] [31:0] $end
      $var wire 32 q rf[31] [31:0] $end
     $upscope $end
     $scope module srcAmux $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 32 H d0 [31:0] $end
      $var wire 32 J d1 [31:0] $end
      $var wire 32 R! d2 [31:0] $end
      $var wire 32 A d3 [31:0] $end
      $var wire 2 } s [1:0] $end
      $var wire 32 -! y [31:0] $end
     $upscope $end
     $scope module srcBmux $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 32 I d0 [31:0] $end
      $var wire 32 J d1 [31:0] $end
      $var wire 32 R! d2 [31:0] $end
      $var wire 2 ~ s [1:0] $end
      $var wire 32 /! y [31:0] $end
     $upscope $end
     $scope module srcbmux $end
      $var wire 32 d! WIDTH [31:0] $end
      $var wire 32 /! d0 [31:0] $end
      $var wire 32 E d1 [31:0] $end
      $var wire 1 0 s $end
      $var wire 32 .! y [31:0] $end
     $upscope $end
     $scope module wc $end
      $var wire 32 G WriteDataM [31:0] $end
      $var wire 2 | WDypesrc [1:0] $end
      $var wire 2 \! a [1:0] $end
      $var wire 32 U! write_mask [31:0] $end
      $var wire 32 Q! WData [31:0] $end
     $upscope $end
    $upscope $end
    $scope module hu $end
     $var wire 1 y RegWriteW $end
     $var wire 1 z RegWriteM $end
     $var wire 5 !! rdw [4:0] $end
     $var wire 5 "! rdm [4:0] $end
     $var wire 5 #! rde [4:0] $end
     $var wire 2 1 ResultSrcE [1:0] $end
     $var wire 2 5 ResultSrcM [1:0] $end
     $var wire 1 V! PCsrc $end
     $var wire 5 7 rs1e [4:0] $end
     $var wire 5 8 rs2e [4:0] $end
     $var wire 5 2! rs1d [4:0] $end
     $var wire 5 3! rs2d [4:0] $end
     $var wire 2 } forwardae [1:0] $end
     $var wire 2 ~ forwardbe [1:0] $end
     $var wire 1 K! flushe $end
     $var wire 1 V! flushd $end
     $var wire 1 J! stallf $end
     $var wire 1 I! stalld $end
     $var wire 1 N! lwStall $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
0%
0&
b00000000000000000000000000000000 '
0(
0)
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
0,
0-
0.
0/
00
b00 1
02
03
b00 4
b00 5
b0000 6
b00000 7
b00000 8
09
0:
0;
0<
b000 =
0>
0?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b000 L
b000 M
b000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
0u
b00000000000000000000000000000000 v
0w
0x
0y
0z
1{
b00 |
b00 }
b00 ~
b00000 !!
b00000 "!
b00000 #!
b00 $!
0%!
0&!
0'!
b00000000000000000000000000000100 (!
b00000000000000000000000000000000 )!
b00000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b000 1!
b00000 2!
b00000 3!
b00000000000000000000000000000000 4!
b0000000 5!
b000 6!
07!
b00 8!
b00 9!
0:!
0;!
0<!
0=!
b0000 >!
b10 ?!
0@!
0A!
0B!
0C!
0D!
b00000000000000 E!
b00000000000000000000000000000000 F!
b00000 G!
b0000000000000000000000000 H!
0I!
0J!
0K!
1L!
1M!
0N!
1O!
1P!
b00000000000000000000000000000000 Q!
b00000000000000000000000000000000 R!
0S!
b00000000000000000000000000000000 T!
b11111111111111111111111111111111 U!
0V!
0W!
b00000000000000000000000000000100 X!
b00000000000000000000000000000000 Y!
b00000000000000000000000000000000 Z!
b00000000000000000000000000000000 [!
b00 \!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 ^!
0_!
b00000000000000000000000000000000 `!
0a!
1b!
0c!
b00000000000000000000000000100000 d!
b10 e!
b00000000000000000000000000000010 f!
b00000000000000000000000000000001 g!
b00000000000000000000000000000100 h!
b00000000000000000000000000000011 i!
b00000000000000000000000000000101 j!
b00000000000000000000000000000100 k!
#2
0O!
1_!
#3
b00000000000000000000000000000100 Q
b10000000000000000000000000000000 r
b10000000000000000000000000000100 (!
b10000000000000000000000000000000 *!
1O!
b10000000000000000000000000000100 X!
0_!
#4
0O!
1_!
#5
b10000000000000000000000000000100 Q
1O!
0_!
#6
0O!
1_!
#7
1O!
0_!
#8
0O!
1_!
#9
1O!
0_!
#10
0O!
1_!
#11
1&
b10000000000000000000000000000100 B
b10000000000000000000000000000100 r
b10000000000000000000000000000000 v
1w
b10 $!
b10000000000000000000000000001000 (!
b10000000000000000000000000000000 )!
b10000000000000000000000000000000 +!
0P!
b10000000000000000000000000001000 X!
b10000000000000000000000000000000 Y!
#12
b10000000000000000000000000000000 A
b10000000000000000000000000000100 C
b10000000000000000000000000001000 Q
b10000000000000000000000000001000 r
b10000000000000000000000000000100 v
1x
b10 |
b10000000000000000000000000001100 (!
b10000000000000000000000000000100 *!
1O!
b00000000000000000000000011111111 U!
b10000000000000000000000000001100 X!
0_!
#13
0O!
1_!
#14
1%
b10000000000000000000000000000000 @
b10000000000000000000000000001000 B
b10000000000000000000000000000100 D
b10000000000000000000000000001100 Q
b10000000000000000000000000001100 r
b10000000000000000000000000000100 s
1u
b10000000000000000000000000001000 v
0x
b10000000000000000000000000010000 (!
b10000000000000000000000000000100 )!
b10000000000000000000000000001000 *!
b10000000000000000000000000000100 +!
1O!
b10000000000000000000000000010000 X!
b10000000000000000000000000000100 Y!
0_!
#15
0O!
1_!
#16
0%
b10000000000000000000000000000100 A
b10000000000000000000000000001100 B
b10000000000000000000000000001000 C
b00000000000000001001000100010111 O
b10000000000000000000000000010000 Q
b10000000000000000000000000010000 r
0u
b10000000000000000000000000001100 v
1x
b10000000000000000000000000010100 (!
b10000000000000000000000000001000 )!
b10000000000000000000000000001100 *!
b10000000000000000000000000001000 +!
1O!
b10000000000000000000000000010100 X!
b10000000000000000000000000001000 Y!
0_!
#17
0O!
1_!
#18
b00000000000000001001000100010111 $
1%
b10000000000000000000000000000100 @
b10000000000000000000000000001000 A
b10000000000000000000000000010000 B
b10000000000000000000000000001100 C
b10000000000000000000000000001000 D
b10000000000000000000000000010100 Q
b10000000000000000000000000010100 r
b10000000000000000000000000001100 s
1u
b10000000000000000000000000010000 v
0x
b10000000000000000000000000011000 (!
b10000000000000000000000000001100 )!
b10000000000000000000000000010000 *!
b10000000000000000000000000001100 +!
1O!
b10000000000000000000000000011000 X!
b10000000000000000000000000001100 Y!
0_!
#19
0O!
1_!
#20
0%
b10000000000000000000000000001000 @
b10000000000000000000000000001100 A
b10000000000000000000000000010100 B
b10000000000000000000000000010000 C
b10000000000000000000000000001100 D
b00001110110000000000000011101111 O
b10000000000000000000000000011000 Q
b10000000000000000000000000011000 r
0u
b10000000000000000000000000010100 v
1x
b10000000000000000000000000011100 (!
b10000000000000000000000000010000 )!
b10000000000000000000000000010100 *!
b10000000000000000000000000010000 +!
1O!
b00000000000000001001000100010111 T!
b10000000000000000000000000011100 X!
b10000000000000000000000000010000 Y!
0_!
#21
0O!
1_!
#22
b00001110110000000000000011101111 $
1%
b10000000000000000000000000001100 @
b10000000000000000000000000010000 A
b10000000000000000000000000011000 B
b10000000000000000000000000010100 C
b10000000000000000000000000010000 D
b10000000000000000000000000011100 Q
b10000000000000000000000000011100 r
b10000000000000000000000000010100 s
1u
b10000000000000000000000000011000 v
0x
b10000000000000000000000000100000 (!
b10000000000000000000000000010100 )!
b10000000000000000000000000011000 *!
b10000000000000000000000000010100 +!
b100 1!
b00001 2!
b00000000000000001001000100010111 4!
b0010111 5!
b001 6!
b11 9!
1<!
b01 ?!
1@!
b11001011000000 E!
b00000000000000001001000000000000 F!
b00010 G!
b0000000000000000100100010 H!
1O!
b10000000000000000000000000100000 X!
b10000000000000000000000000010100 Y!
0_!
#23
0O!
1_!
#24
0%
10
b11 1
b00001 7
b001 =
b10000000000000000000000000010000 @
b10000000000000000000000000010100 A
b10000000000000000000000000011100 B
b10000000000000000000000000011000 C
b10000000000000000000000000010100 D
b00000000000000001001000000000000 E
b001 L
b00000000000000001000000001100111 O
b10000000000000000000000000100000 Q
b10000000000000000000000000100000 r
0u
b10000000000000000000000000011100 v
1x
0{
b00010 #!
b01 $!
1%!
1'!
b10000000000000000000000000100100 (!
b10000000000000001001000000011000 )!
b10000000000000000000000000011100 *!
b10000000000000000000000000011000 +!
b00000000000000001001000000000000 ,!
b00000000000000001001000000000000 .!
1O!
b00001110110000000000000011101111 T!
b10000000000000000000000000100100 X!
b10000000000000001001000000011000 Y!
b00000000000000001001000000000000 ]!
b00000000000000001001000000000000 ^!
0_!
#25
0O!
1_!
#26
b00000000000000001000000001100111 $
1%
b11 5
b10000000000000000000000000010100 @
b10000000000000001001000000011000 A
b10000000000000000000000000100000 B
b10000000000000000000000000011100 C
b10000000000000000000000000011000 D
b001 M
b10000000000000000000000000100100 Q
b10000000000000000000000000100100 r
b10000000000000000000000000011100 s
1u
b10000000000000000000000000100000 v
0x
1z
b01 |
b00010 "!
b10000000000000000000000000101000 (!
b10000000000000001001000000011100 )!
b10000000000000000000000000100000 *!
b10000000000000000000000000011100 +!
b011 1!
b00000 2!
b01100 3!
b00001110110000000000000011101111 4!
b1101111 5!
b000 6!
b10 9!
1;!
0<!
b10 ?!
1C!
b10110010000100 E!
b00000000000000000000000011101100 F!
b00001 G!
b0000111011000000000000001 H!
1O!
b00000000000000001001000000000000 R!
b00000000000000001111111111111111 U!
b10000000000000000000000000101000 X!
b10000000000000001001000000011100 Y!
0_!
#27
0O!
1_!
#28
0%
00
b10 1
b11 4
b00000 7
b01100 8
19
b000 =
b10000000000000001001000000011000 @
b10000000000000001001000000011100 A
b10000000000000000000000000100100 B
b10000000000000000000000000100000 C
b10000000000000000000000000011100 D
b00000000000000000000000011101100 E
b00000000000000001001000000000000 F
b10000000000000001001000000011000 J
b000 L
b001 N
b00000000000100000000010100010011 O
b10000000000000000000000000101000 Q
b10000000000000000000000000101000 r
0u
b10000000000000000000000000100100 v
1x
1y
1{
b00010 !!
b00001 #!
b10 $!
0'!
b10000000000000000000000000101100 (!
b10000000000000000000000100001100 )!
b10000000000000000000000000100100 *!
b10000000000000000000000000100000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 .!
b10000000000000001001000000011000 0!
1K!
1O!
b00000000000000001000000001100111 T!
1V!
b10000000000000000000000100001100 X!
b10000000000000000000000100001100 Y!
b00000000000000000000000000000000 ]!
b00000000000000000000000000000000 ^!
0_!
#29
0O!
1_!
#30
b00000000000100000000010100010011 $
1%
b00 1
b10 5
b00000 8
09
b10000000000000001001000000011100 @
b10000000000000000000000100001100 A
b00000000000000000000000000000000 B
b10000000000000000000000000100100 C
b10000000000000000000000000100000 D
b00000000000000000000000000000000 E
b10000000000000001001000000011100 J
b000 M
b10000000000000000000000000000000 Q
b10000000000000001001000000011000 T
b10000000000000000000000100001100 r
b10000000000000000000000000100100 s
1u
b10000000000000000000000000101000 v
0x
b10 |
b00001 "!
b00000 #!
b00 $!
0%!
b10000000000000000000000100010000 (!
b00000000000000000000000000000000 )!
b10000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b10000000000000001001000000011100 0!
b000 1!
b00000 3!
b00000000000000000000000000010011 4!
b0010011 5!
b10 8!
b00 9!
0;!
1<!
0C!
b10001000010000 E!
b00000000000000000000000000000000 F!
b00000 G!
b0000000000000000000000000 H!
0K!
1O!
b00000000000000000000000000000000 R!
b00000000000000000000000011111111 U!
0V!
b10000000000000000000000100010000 X!
b00000000000000000000000000000000 Y!
0_!
#31
0O!
1_!
#32
0%
10
b10 4
b00 5
b10000000000000000000000100001100 @
b00000000000000000000000000000000 A
b10000000000000000000000000000000 B
b00000000000000000000000000000000 C
b10000000000000000000000000100100 D
b00000000000000000000000000000000 F
b10000000000000000000000000100100 J
b000 N
b00001100110000000000000011101111 O
b10000000000000000000000100010000 Q
b10000000000000001001000000011100 T
b10000000000000000000000100010000 r
0u
b10000000000000000000000100001100 v
1x
0z
b00 |
b00001 !!
b00000 "!
b10 $!
1%!
b10000000000000000000000100010100 (!
b10000000000000000000000000000000 )!
b10000000000000000000000100001100 *!
b10000000000000000000000000000000 +!
b10000000000000000000000000100100 0!
b00001 2!
b00000000000000001000000001100111 4!
b1100111 5!
b00 8!
1;!
1=!
1C!
b10001000000101 E!
b0000000000000000100000000 H!
1O!
b00000000000100000000010100010011 T!
b11111111111111111111111111111111 U!
b10000000000000000000000100010100 X!
b10000000000000000000000000000000 Y!
b10000000000000000000000000100100 Z!
0_!
#33
0O!
1_!
#34
b00001100110000000000000011101111 $
1%
b00 4
b00001 7
19
1;
b00000000000000000000000000000000 @
b10000000000000000000000000000000 A
b10000000000000000000000100010000 B
b10000000000000000000000000000000 C
b00000000000000000000000000000000 D
b10000000000000000000000000100100 H
b00000000000000000000000000000000 J
b10000000000000000000000100010100 Q
b10000000000000000000000000100100 S
b10000000000000000000000100010100 r
b10000000000000000000000100001100 s
1u
b10000000000000000000000100010000 v
0x
0y
1z
0{
b10 |
b00000 !!
b10000000000000000000000100011000 (!
b10000000000000000000000100001100 )!
b10000000000000000000000100010000 *!
b10000000000000000000000100001100 +!
b10000000000000000000000000100100 ,!
b10000000000000000000000000100100 -!
b00000000000000000000000000000000 0!
b00000 2!
b00001 3!
b00000000000100000000010100010011 4!
b0010011 5!
b10 8!
0;!
0=!
0C!
b10001000010000 E!
b00000000000000000000000000000001 F!
b01010 G!
b0000000000010000000001010 H!
1K!
1O!
b00000000000000000000000011111111 U!
1V!
b10000000000000000000000100001100 X!
b10000000000000000000000100001100 Y!
b00000000000000000000000000000000 Z!
b10000000000000000000000000100100 [!
b10000000000000000000000000100100 ^!
0_!
#35
0O!
1_!
#36
0%
00
b00000 7
09
0;
1<
b10000000000000000000000000000000 @
b10000000000000000000000100001100 A
b00000000000000000000000000000000 B
b10000000000000000000000100010000 C
b10000000000000000000000000000000 D
b00000000000000000000000000000000 H
b00000000000100000000000001110011 O
b10000000000000000000000000000000 Q
b10000000000000000000000100001100 r
b00001100110000000000000011101111 t
0u
b10000000000000000000000100010100 v
1x
1y
1{
b00 $!
0%!
b10000000000000000000000100010000 (!
b00000000000000000000000000000000 )!
b10000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000 3!
b00000000000000000000000000010011 4!
b00000000000000000000000000000000 F!
b00000 G!
b0000000000000000000000000 H!
0K!
1O!
b10000000000000000000000000100100 R!
b00001100110000000000000011101111 T!
0V!
b10000000000000000000000100010000 X!
b00000000000000000000000000000000 Y!
b00000000000000000000000000000000 [!
b00000000000000000000000000000000 ^!
0_!
#37
0O!
1_!
#38
b00000000000100000000000001110011 $
1%
10
13
0<
b10000000000000000000000100001100 @
b00000000000000000000000000000000 A
b10000000000000000000000000000000 B
b00000000000000000000000000000000 C
b10000000000000000000000100010000 D
b10000000000000000000000000100100 F
b10000000000000000000000000100100 J
b00001100110000000000000011101111 K
b10000000000000000000000100010000 Q
b10000000000000000000000100010000 r
b10000000000000000000000100010100 s
b00000000000000000000000000000000 t
1u
b10000000000000000000000100001100 v
0x
0z
b00 |
b10 $!
1%!
b10000000000000000000000100010100 (!
b10000000000000000000000000000000 )!
b10000000000000000000000100001100 *!
b10000000000000000000000000000000 +!
b10000000000000000000000000100100 0!
b011 1!
b01100 3!
b00001100110000000000000011101111 4!
b1101111 5!
b00 8!
b10 9!
1;!
0<!
1C!
b10110010000100 E!
b00000000000000000000000011001100 F!
b00001 G!
b0000110011000000000000001 H!
1K!
1O!
b00000000000000000000000000000000 R!
b11111111111111111111111111111111 U!
1V!
b10000000000000000000000000100100 X!
b10000000000000000000000000100100 Y!
b10000000000000000000000000100100 Z!
0_!
#39
0O!
1_!
#40
0%
00
03
b00000000000000000000000000000000 @
b10000000000000000000000000000000 A
b00000000000000000000000000000000 B
b10000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 F
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 O
b10000000000000000000000000000000 Q
b10000000000000000000000000100100 r
0u
b10000000000000000000000100010000 v
1x
0y
1z
b10 |
b00 $!
0%!
b10000000000000000000000000101000 (!
b00000000000000000000000000000000 )!
b10000000000000000000000000000000 *!
b00000000000000000000000000000000 +!
b00000000000000000000000000000000 0!
b000 1!
b00000 3!
b00000000000000000000000000010011 4!
b0010011 5!
b10 8!
b00 9!
0;!
1<!
0C!
b10001000010000 E!
b00000000000000000000000000000000 F!
b00000 G!
b0000000000000000000000000 H!
0K!
1O!
b00000000000100000000000001110011 T!
b00000000000000000000000011111111 U!
0V!
b10000000000000000000000000101000 X!
b00000000000000000000000000000000 Y!
b00000000000000000000000000000000 Z!
0_!
#41
0O!
1_!
