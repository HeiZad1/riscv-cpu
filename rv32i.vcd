$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 )+ clock $end
  $var wire 1 *+ reset $end
  $var wire 16 ++ externalPins_gpio_out [15:0] $end
  $var wire 16 ,+ externalPins_gpio_in [15:0] $end
  $var wire 8 -+ externalPins_gpio_seg_0 [7:0] $end
  $var wire 8 .+ externalPins_gpio_seg_1 [7:0] $end
  $var wire 8 /+ externalPins_gpio_seg_2 [7:0] $end
  $var wire 8 0+ externalPins_gpio_seg_3 [7:0] $end
  $var wire 8 1+ externalPins_gpio_seg_4 [7:0] $end
  $var wire 8 2+ externalPins_gpio_seg_5 [7:0] $end
  $var wire 8 3+ externalPins_gpio_seg_6 [7:0] $end
  $var wire 8 4+ externalPins_gpio_seg_7 [7:0] $end
  $var wire 1 5+ externalPins_ps2_clk $end
  $var wire 1 6+ externalPins_ps2_data $end
  $var wire 8 7+ externalPins_vga_r [7:0] $end
  $var wire 8 8+ externalPins_vga_g [7:0] $end
  $var wire 8 9+ externalPins_vga_b [7:0] $end
  $var wire 1 :+ externalPins_vga_hsync $end
  $var wire 1 ;+ externalPins_vga_vsync $end
  $var wire 1 <+ externalPins_vga_valid $end
  $var wire 1 =+ externalPins_uart_rx $end
  $var wire 1 >+ externalPins_uart_tx $end
  $scope module ysyxSoCFull $end
   $var wire 1 )+ clock $end
   $var wire 1 *+ reset $end
   $var wire 16 ++ externalPins_gpio_out [15:0] $end
   $var wire 16 ,+ externalPins_gpio_in [15:0] $end
   $var wire 8 -+ externalPins_gpio_seg_0 [7:0] $end
   $var wire 8 .+ externalPins_gpio_seg_1 [7:0] $end
   $var wire 8 /+ externalPins_gpio_seg_2 [7:0] $end
   $var wire 8 0+ externalPins_gpio_seg_3 [7:0] $end
   $var wire 8 1+ externalPins_gpio_seg_4 [7:0] $end
   $var wire 8 2+ externalPins_gpio_seg_5 [7:0] $end
   $var wire 8 3+ externalPins_gpio_seg_6 [7:0] $end
   $var wire 8 4+ externalPins_gpio_seg_7 [7:0] $end
   $var wire 1 5+ externalPins_ps2_clk $end
   $var wire 1 6+ externalPins_ps2_data $end
   $var wire 8 7+ externalPins_vga_r [7:0] $end
   $var wire 8 8+ externalPins_vga_g [7:0] $end
   $var wire 8 9+ externalPins_vga_b [7:0] $end
   $var wire 1 :+ externalPins_vga_hsync $end
   $var wire 1 ;+ externalPins_vga_vsync $end
   $var wire 1 <+ externalPins_vga_valid $end
   $var wire 1 =+ externalPins_uart_rx $end
   $var wire 1 >+ externalPins_uart_tx $end
   $scope module asic $end
    $var wire 1 )+ clock $end
    $var wire 1 *+ reset $end
    $var wire 1 $( spi_sck $end
    $var wire 8 %( spi_ss [7:0] $end
    $var wire 1 ?+ spi_mosi $end
    $var wire 1 @+ spi_miso $end
    $var wire 1 =+ uart_rx $end
    $var wire 1 >+ uart_tx $end
    $var wire 1 K psram_sck $end
    $var wire 1 L psram_ce_n $end
    $var wire 4 A+ psram_dio [3:0] $end
    $var wire 1 B+ sdram_clk $end
    $var wire 1 M sdram_cke $end
    $var wire 1 N sdram_cs $end
    $var wire 1 O sdram_ras $end
    $var wire 1 P sdram_cas $end
    $var wire 1 Q sdram_we $end
    $var wire 13 R sdram_a [12:0] $end
    $var wire 2 S sdram_ba [1:0] $end
    $var wire 2 T sdram_dqm [1:0] $end
    $var wire 16 U sdram_dq [15:0] $end
    $var wire 16 ++ gpio_out [15:0] $end
    $var wire 16 ,+ gpio_in [15:0] $end
    $var wire 8 -+ gpio_seg_0 [7:0] $end
    $var wire 8 .+ gpio_seg_1 [7:0] $end
    $var wire 8 /+ gpio_seg_2 [7:0] $end
    $var wire 8 0+ gpio_seg_3 [7:0] $end
    $var wire 8 1+ gpio_seg_4 [7:0] $end
    $var wire 8 2+ gpio_seg_5 [7:0] $end
    $var wire 8 3+ gpio_seg_6 [7:0] $end
    $var wire 8 4+ gpio_seg_7 [7:0] $end
    $var wire 1 5+ ps2_clk $end
    $var wire 1 6+ ps2_data $end
    $var wire 8 7+ vga_r [7:0] $end
    $var wire 8 8+ vga_g [7:0] $end
    $var wire 8 9+ vga_b [7:0] $end
    $var wire 1 :+ vga_hsync $end
    $var wire 1 ;+ vga_vsync $end
    $var wire 1 <+ vga_valid $end
    $scope module apbdelay_delayer $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 32 V in_paddr [31:0] $end
     $var wire 1 W in_psel $end
     $var wire 1 X in_penable $end
     $var wire 3 O+ in_pprot [2:0] $end
     $var wire 1 Y in_pwrite $end
     $var wire 32 ~* in_pwdata [31:0] $end
     $var wire 4 Z in_pstrb [3:0] $end
     $var wire 1 ~) in_pready $end
     $var wire 32 !* in_prdata [31:0] $end
     $var wire 1 P+ in_pslverr $end
     $var wire 32 V out_paddr [31:0] $end
     $var wire 1 W out_psel $end
     $var wire 1 X out_penable $end
     $var wire 3 O+ out_pprot [2:0] $end
     $var wire 1 Y out_pwrite $end
     $var wire 32 ~* out_pwdata [31:0] $end
     $var wire 4 Z out_pstrb [3:0] $end
     $var wire 1 ~) out_pready $end
     $var wire 32 !* out_prdata [31:0] $end
     $var wire 1 P+ out_pslverr $end
    $upscope $end
    $scope module apbxbar $end
     $var wire 1 W auto_in_psel $end
     $var wire 1 X auto_in_penable $end
     $var wire 1 Y auto_in_pwrite $end
     $var wire 32 V auto_in_paddr [31:0] $end
     $var wire 3 O+ auto_in_pprot [2:0] $end
     $var wire 32 ~* auto_in_pwdata [31:0] $end
     $var wire 4 Z auto_in_pstrb [3:0] $end
     $var wire 1 ~) auto_in_pready $end
     $var wire 1 P+ auto_in_pslverr $end
     $var wire 32 !* auto_in_prdata [31:0] $end
     $var wire 1 [ auto_out_6_psel $end
     $var wire 1 \ auto_out_6_penable $end
     $var wire 1 Y auto_out_6_pwrite $end
     $var wire 32 V auto_out_6_paddr [31:0] $end
     $var wire 3 O+ auto_out_6_pprot [2:0] $end
     $var wire 32 ~* auto_out_6_pwdata [31:0] $end
     $var wire 4 Z auto_out_6_pstrb [3:0] $end
     $var wire 1 ] auto_out_6_pready $end
     $var wire 1 P+ auto_out_6_pslverr $end
     $var wire 32 ^ auto_out_6_prdata [31:0] $end
     $var wire 1 _ auto_out_5_psel $end
     $var wire 1 ` auto_out_5_penable $end
     $var wire 1 Y auto_out_5_pwrite $end
     $var wire 30 a auto_out_5_paddr [29:0] $end
     $var wire 3 O+ auto_out_5_pprot [2:0] $end
     $var wire 32 ~* auto_out_5_pwdata [31:0] $end
     $var wire 4 Z auto_out_5_pstrb [3:0] $end
     $var wire 1 P+ auto_out_5_pready $end
     $var wire 1 P+ auto_out_5_pslverr $end
     $var wire 32 Q+ auto_out_5_prdata [31:0] $end
     $var wire 1 b auto_out_4_psel $end
     $var wire 1 c auto_out_4_penable $end
     $var wire 1 Y auto_out_4_pwrite $end
     $var wire 29 d auto_out_4_paddr [28:0] $end
     $var wire 3 O+ auto_out_4_pprot [2:0] $end
     $var wire 32 ~* auto_out_4_pwdata [31:0] $end
     $var wire 4 Z auto_out_4_pstrb [3:0] $end
     $var wire 1 P+ auto_out_4_pready $end
     $var wire 1 P+ auto_out_4_pslverr $end
     $var wire 32 Q+ auto_out_4_prdata [31:0] $end
     $var wire 1 e auto_out_3_psel $end
     $var wire 1 f auto_out_3_penable $end
     $var wire 1 Y auto_out_3_pwrite $end
     $var wire 29 d auto_out_3_paddr [28:0] $end
     $var wire 3 O+ auto_out_3_pprot [2:0] $end
     $var wire 32 ~* auto_out_3_pwdata [31:0] $end
     $var wire 4 Z auto_out_3_pstrb [3:0] $end
     $var wire 1 P+ auto_out_3_pready $end
     $var wire 1 P+ auto_out_3_pslverr $end
     $var wire 32 Q+ auto_out_3_prdata [31:0] $end
     $var wire 1 g auto_out_2_psel $end
     $var wire 1 h auto_out_2_penable $end
     $var wire 1 Y auto_out_2_pwrite $end
     $var wire 32 V auto_out_2_paddr [31:0] $end
     $var wire 3 O+ auto_out_2_pprot [2:0] $end
     $var wire 32 ~* auto_out_2_pwdata [31:0] $end
     $var wire 4 Z auto_out_2_pstrb [3:0] $end
     $var wire 1 i auto_out_2_pready $end
     $var wire 1 P+ auto_out_2_pslverr $end
     $var wire 32 j auto_out_2_prdata [31:0] $end
     $var wire 1 k auto_out_1_psel $end
     $var wire 1 l auto_out_1_penable $end
     $var wire 1 Y auto_out_1_pwrite $end
     $var wire 29 d auto_out_1_paddr [28:0] $end
     $var wire 3 O+ auto_out_1_pprot [2:0] $end
     $var wire 32 ~* auto_out_1_pwdata [31:0] $end
     $var wire 4 Z auto_out_1_pstrb [3:0] $end
     $var wire 1 m auto_out_1_pready $end
     $var wire 1 P+ auto_out_1_pslverr $end
     $var wire 32 W' auto_out_1_prdata [31:0] $end
     $var wire 1 n auto_out_0_psel $end
     $var wire 1 o auto_out_0_penable $end
     $var wire 1 Y auto_out_0_pwrite $end
     $var wire 30 a auto_out_0_paddr [29:0] $end
     $var wire 3 O+ auto_out_0_pprot [2:0] $end
     $var wire 32 ~* auto_out_0_pwdata [31:0] $end
     $var wire 4 Z auto_out_0_pstrb [3:0] $end
     $var wire 1 &( auto_out_0_pready $end
     $var wire 1 P+ auto_out_0_pslverr $end
     $var wire 32 '( auto_out_0_prdata [31:0] $end
     $var wire 1 p sel_0 $end
     $var wire 1 q sel_1 $end
     $var wire 1 r sel_2 $end
     $var wire 1 s sel_3 $end
     $var wire 1 t sel_4 $end
     $var wire 1 u sel_5 $end
     $var wire 1 v sel_6 $end
    $upscope $end
    $scope module axi42apb $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 w auto_in_awready $end
     $var wire 1 x auto_in_awvalid $end
     $var wire 4 y auto_in_awid [3:0] $end
     $var wire 32 z auto_in_awaddr [31:0] $end
     $var wire 3 { auto_in_awsize [2:0] $end
     $var wire 1 w auto_in_wready $end
     $var wire 1 | auto_in_wvalid $end
     $var wire 64 } auto_in_wdata [63:0] $end
     $var wire 8 !! auto_in_wstrb [7:0] $end
     $var wire 1 "* auto_in_bready $end
     $var wire 1 #* auto_in_bvalid $end
     $var wire 4 "! auto_in_bid [3:0] $end
     $var wire 2 #! auto_in_bresp [1:0] $end
     $var wire 1 $! auto_in_arready $end
     $var wire 1 %! auto_in_arvalid $end
     $var wire 4 &! auto_in_arid [3:0] $end
     $var wire 32 '! auto_in_araddr [31:0] $end
     $var wire 3 (! auto_in_arsize [2:0] $end
     $var wire 1 $* auto_in_rready $end
     $var wire 1 %* auto_in_rvalid $end
     $var wire 4 )! auto_in_rid [3:0] $end
     $var wire 64 X' auto_in_rdata [63:0] $end
     $var wire 2 #! auto_in_rresp [1:0] $end
     $var wire 1 W auto_out_psel $end
     $var wire 1 X auto_out_penable $end
     $var wire 1 Y auto_out_pwrite $end
     $var wire 32 V auto_out_paddr [31:0] $end
     $var wire 32 ~* auto_out_pwdata [31:0] $end
     $var wire 4 Z auto_out_pstrb [3:0] $end
     $var wire 1 ~) auto_out_pready $end
     $var wire 1 P+ auto_out_pslverr $end
     $var wire 32 !* auto_out_prdata [31:0] $end
     $var wire 1 X nodeOut_penable $end
     $var wire 2 *! state [1:0] $end
     $var wire 1 $! accept_read $end
     $var wire 1 w accept_write $end
     $var wire 1 +! is_write_r $end
     $var wire 1 Y is_write $end
     $var wire 4 )! rid_reg [3:0] $end
     $var wire 4 "! bid_reg [3:0] $end
     $var wire 32 ,! araddr_reg_r [31:0] $end
     $var wire 32 -! awaddr_reg_r [31:0] $end
     $var wire 32 .! awaddr_reg [31:0] $end
     $var wire 64 /! wdata_reg_r [63:0] $end
     $var wire 64 1! wdata_reg [63:0] $end
     $var wire 8 3! wstrb_reg_r [7:0] $end
     $var wire 8 4! wstrb_reg [7:0] $end
     $var wire 2 R+ resp [1:0] $end
     $var wire 2 5! resp_hold_r [1:0] $end
     $var wire 2 #! resp_hold [1:0] $end
     $var wire 1 %* nodeIn_rvalid $end
     $var wire 32 6! nodeIn_rdata_r [31:0] $end
     $var wire 1 #* nodeIn_bvalid $end
    $upscope $end
    $scope module axi4frag $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 7! auto_in_awready $end
     $var wire 1 8! auto_in_awvalid $end
     $var wire 4 9! auto_in_awid [3:0] $end
     $var wire 32 :! auto_in_awaddr [31:0] $end
     $var wire 8 ;! auto_in_awlen [7:0] $end
     $var wire 3 <! auto_in_awsize [2:0] $end
     $var wire 2 =! auto_in_awburst [1:0] $end
     $var wire 1 >! auto_in_wready $end
     $var wire 1 ?! auto_in_wvalid $end
     $var wire 64 @! auto_in_wdata [63:0] $end
     $var wire 8 B! auto_in_wstrb [7:0] $end
     $var wire 1 C! auto_in_wlast $end
     $var wire 1 D! auto_in_bready $end
     $var wire 1 &* auto_in_bvalid $end
     $var wire 4 '* auto_in_bid [3:0] $end
     $var wire 2 Z' auto_in_bresp [1:0] $end
     $var wire 1 E! auto_in_arready $end
     $var wire 1 F! auto_in_arvalid $end
     $var wire 4 G! auto_in_arid [3:0] $end
     $var wire 32 H! auto_in_araddr [31:0] $end
     $var wire 8 I! auto_in_arlen [7:0] $end
     $var wire 3 J! auto_in_arsize [2:0] $end
     $var wire 2 K! auto_in_arburst [1:0] $end
     $var wire 1 L! auto_in_rready $end
     $var wire 1 (* auto_in_rvalid $end
     $var wire 4 )* auto_in_rid [3:0] $end
     $var wire 64 [' auto_in_rdata [63:0] $end
     $var wire 2 ]' auto_in_rresp [1:0] $end
     $var wire 1 ^' auto_in_rlast $end
     $var wire 1 ** auto_out_awready $end
     $var wire 1 M! auto_out_awvalid $end
     $var wire 4 y auto_out_awid [3:0] $end
     $var wire 32 z auto_out_awaddr [31:0] $end
     $var wire 3 { auto_out_awsize [2:0] $end
     $var wire 1 N! auto_out_awecho_real_last $end
     $var wire 1 +* auto_out_wready $end
     $var wire 1 O! auto_out_wvalid $end
     $var wire 64 } auto_out_wdata [63:0] $end
     $var wire 8 !! auto_out_wstrb [7:0] $end
     $var wire 1 P! auto_out_wlast $end
     $var wire 1 ,* auto_out_bready $end
     $var wire 1 -* auto_out_bvalid $end
     $var wire 4 '* auto_out_bid [3:0] $end
     $var wire 2 .* auto_out_bresp [1:0] $end
     $var wire 1 /* auto_out_becho_real_last $end
     $var wire 1 0* auto_out_arready $end
     $var wire 1 Q! auto_out_arvalid $end
     $var wire 4 &! auto_out_arid [3:0] $end
     $var wire 32 '! auto_out_araddr [31:0] $end
     $var wire 3 (! auto_out_arsize [2:0] $end
     $var wire 1 R! auto_out_arecho_real_last $end
     $var wire 1 L! auto_out_rready $end
     $var wire 1 (* auto_out_rvalid $end
     $var wire 4 )* auto_out_rid [3:0] $end
     $var wire 64 [' auto_out_rdata [63:0] $end
     $var wire 2 ]' auto_out_rresp [1:0] $end
     $var wire 1 _' auto_out_recho_real_last $end
     $var wire 1 1* auto_out_rlast $end
     $var wire 1 O! nodeOut_wvalid $end
     $var wire 1 S! w_idle $end
     $var wire 1 2* in_awready $end
     $var wire 1 T! busy $end
     $var wire 32 U! r_addr [31:0] $end
     $var wire 8 V! r_len [7:0] $end
     $var wire 8 W! len [7:0] $end
     $var wire 32 X! addr [31:0] $end
     $var wire 1 Y! busy_1 $end
     $var wire 32 Z! r_addr_1 [31:0] $end
     $var wire 8 [! r_len_1 [7:0] $end
     $var wire 8 \! len_1 [7:0] $end
     $var wire 32 ]! addr_1 [31:0] $end
     $var wire 1 ^! wbeats_latched $end
     $var wire 1 M! nodeOut_awvalid $end
     $var wire 1 _! wbeats_valid $end
     $var wire 9 `! w_counter [8:0] $end
     $var wire 9 a! w_todo [8:0] $end
     $var wire 1 P! w_last $end
     $var wire 1 ,* nodeOut_bready $end
     $var wire 2 b! error_0 [1:0] $end
     $var wire 2 c! error_1 [1:0] $end
     $var wire 2 d! error_2 [1:0] $end
     $var wire 2 e! error_3 [1:0] $end
     $var wire 2 f! error_4 [1:0] $end
     $var wire 2 g! error_5 [1:0] $end
     $var wire 2 h! error_6 [1:0] $end
     $var wire 2 i! error_7 [1:0] $end
     $var wire 2 j! error_8 [1:0] $end
     $var wire 2 k! error_9 [1:0] $end
     $var wire 2 l! error_10 [1:0] $end
     $var wire 2 m! error_11 [1:0] $end
     $var wire 2 n! error_12 [1:0] $end
     $var wire 2 o! error_13 [1:0] $end
     $var wire 2 p! error_14 [1:0] $end
     $var wire 2 q! error_15 [1:0] $end
     $scope module deq_q $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 E! io_enq_ready $end
      $var wire 1 F! io_enq_valid $end
      $var wire 4 G! io_enq_bits_id [3:0] $end
      $var wire 32 H! io_enq_bits_addr [31:0] $end
      $var wire 8 I! io_enq_bits_len [7:0] $end
      $var wire 3 J! io_enq_bits_size [2:0] $end
      $var wire 2 K! io_enq_bits_burst [1:0] $end
      $var wire 1 3* io_deq_ready $end
      $var wire 1 Q! io_deq_valid $end
      $var wire 4 &! io_deq_bits_id [3:0] $end
      $var wire 32 r! io_deq_bits_addr [31:0] $end
      $var wire 8 s! io_deq_bits_len [7:0] $end
      $var wire 3 (! io_deq_bits_size [2:0] $end
      $var wire 2 t! io_deq_bits_burst [1:0] $end
      $var wire 49 u! ram [48:0] $end
      $var wire 1 w! full $end
      $var wire 1 Q! io_deq_valid_0 $end
      $var wire 1 4* do_enq $end
     $upscope $end
     $scope module deq_q_1 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 7! io_enq_ready $end
      $var wire 1 8! io_enq_valid $end
      $var wire 4 9! io_enq_bits_id [3:0] $end
      $var wire 32 :! io_enq_bits_addr [31:0] $end
      $var wire 8 ;! io_enq_bits_len [7:0] $end
      $var wire 3 <! io_enq_bits_size [2:0] $end
      $var wire 2 =! io_enq_bits_burst [1:0] $end
      $var wire 1 5* io_deq_ready $end
      $var wire 1 x! io_deq_valid $end
      $var wire 4 y io_deq_bits_id [3:0] $end
      $var wire 32 y! io_deq_bits_addr [31:0] $end
      $var wire 8 z! io_deq_bits_len [7:0] $end
      $var wire 3 { io_deq_bits_size [2:0] $end
      $var wire 2 {! io_deq_bits_burst [1:0] $end
      $var wire 49 |! ram [48:0] $end
      $var wire 1 ~! full $end
      $var wire 1 x! io_deq_valid_0 $end
      $var wire 1 6* do_enq $end
     $upscope $end
     $scope module in_wdeq_q $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 >! io_enq_ready $end
      $var wire 1 ?! io_enq_valid $end
      $var wire 64 @! io_enq_bits_data [63:0] $end
      $var wire 8 B! io_enq_bits_strb [7:0] $end
      $var wire 1 C! io_enq_bits_last $end
      $var wire 1 7* io_deq_ready $end
      $var wire 1 !" io_deq_valid $end
      $var wire 64 } io_deq_bits_data [63:0] $end
      $var wire 8 !! io_deq_bits_strb [7:0] $end
      $var wire 1 "" io_deq_bits_last $end
      $var wire 73 #" ram [72:0] $end
      $var wire 1 &" full $end
      $var wire 1 !" io_deq_valid_0 $end
      $var wire 1 8* do_enq $end
     $upscope $end
    $upscope $end
    $scope module axi4ram $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 9* auto_in_awready $end
     $var wire 1 '" auto_in_awvalid $end
     $var wire 4 y auto_in_awid [3:0] $end
     $var wire 28 (" auto_in_awaddr [27:0] $end
     $var wire 1 `' auto_in_wready $end
     $var wire 1 )" auto_in_wvalid $end
     $var wire 64 } auto_in_wdata [63:0] $end
     $var wire 8 !! auto_in_wstrb [7:0] $end
     $var wire 1 :* auto_in_bready $end
     $var wire 1 *" auto_in_bvalid $end
     $var wire 4 +" auto_in_bid [3:0] $end
     $var wire 2 ," auto_in_bresp [1:0] $end
     $var wire 1 ;* auto_in_arready $end
     $var wire 1 -" auto_in_arvalid $end
     $var wire 4 &! auto_in_arid [3:0] $end
     $var wire 28 ." auto_in_araddr [27:0] $end
     $var wire 1 <* auto_in_rready $end
     $var wire 1 /" auto_in_rvalid $end
     $var wire 4 0" auto_in_rid [3:0] $end
     $var wire 64 1" auto_in_rdata [63:0] $end
     $var wire 2 3" auto_in_rresp [1:0] $end
     $var wire 1 ;* nodeIn_arready $end
     $var wire 1 9* nodeIn_awready $end
     $var wire 1 4" w_sel0 $end
     $var wire 1 *" w_full $end
     $var wire 4 +" w_id [3:0] $end
     $var wire 1 5" r_sel1 $end
     $var wire 1 6" w_sel1 $end
     $var wire 1 /" r_full $end
     $var wire 4 0" r_id [3:0] $end
     $var wire 1 =* ren $end
     $var wire 1 7" rdata_REG $end
     $var wire 8 8" rdata_r0 [7:0] $end
     $var wire 8 9" rdata_r1 [7:0] $end
     $var wire 8 :" rdata_r2 [7:0] $end
     $var wire 8 ;" rdata_r3 [7:0] $end
     $var wire 8 <" rdata_r4 [7:0] $end
     $var wire 8 =" rdata_r5 [7:0] $end
     $var wire 8 >" rdata_r6 [7:0] $end
     $var wire 8 ?" rdata_r7 [7:0] $end
     $scope module mem_ext $end
      $var wire 10 @" R0_addr [9:0] $end
      $var wire 1 =* R0_en $end
      $var wire 1 )+ R0_clk $end
      $var wire 64 A" R0_data [63:0] $end
      $var wire 10 C" W0_addr [9:0] $end
      $var wire 1 >* W0_en $end
      $var wire 1 )+ W0_clk $end
      $var wire 64 } W0_data [63:0] $end
      $var wire 8 !! W0_mask [7:0] $end
     $upscope $end
    $upscope $end
    $scope module axi4xbar $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 7! auto_in_awready $end
     $var wire 1 8! auto_in_awvalid $end
     $var wire 4 9! auto_in_awid [3:0] $end
     $var wire 32 :! auto_in_awaddr [31:0] $end
     $var wire 8 ;! auto_in_awlen [7:0] $end
     $var wire 3 <! auto_in_awsize [2:0] $end
     $var wire 2 =! auto_in_awburst [1:0] $end
     $var wire 1 >! auto_in_wready $end
     $var wire 1 ?! auto_in_wvalid $end
     $var wire 64 @! auto_in_wdata [63:0] $end
     $var wire 8 B! auto_in_wstrb [7:0] $end
     $var wire 1 C! auto_in_wlast $end
     $var wire 1 D! auto_in_bready $end
     $var wire 1 &* auto_in_bvalid $end
     $var wire 4 '* auto_in_bid [3:0] $end
     $var wire 2 Z' auto_in_bresp [1:0] $end
     $var wire 1 E! auto_in_arready $end
     $var wire 1 F! auto_in_arvalid $end
     $var wire 4 G! auto_in_arid [3:0] $end
     $var wire 32 H! auto_in_araddr [31:0] $end
     $var wire 8 I! auto_in_arlen [7:0] $end
     $var wire 3 J! auto_in_arsize [2:0] $end
     $var wire 2 K! auto_in_arburst [1:0] $end
     $var wire 1 L! auto_in_rready $end
     $var wire 1 (* auto_in_rvalid $end
     $var wire 4 )* auto_in_rid [3:0] $end
     $var wire 64 [' auto_in_rdata [63:0] $end
     $var wire 2 ]' auto_in_rresp [1:0] $end
     $var wire 1 ^' auto_in_rlast $end
     $var wire 1 7! auto_out_awready $end
     $var wire 1 8! auto_out_awvalid $end
     $var wire 4 9! auto_out_awid [3:0] $end
     $var wire 32 :! auto_out_awaddr [31:0] $end
     $var wire 8 ;! auto_out_awlen [7:0] $end
     $var wire 3 <! auto_out_awsize [2:0] $end
     $var wire 2 =! auto_out_awburst [1:0] $end
     $var wire 1 >! auto_out_wready $end
     $var wire 1 ?! auto_out_wvalid $end
     $var wire 64 @! auto_out_wdata [63:0] $end
     $var wire 8 B! auto_out_wstrb [7:0] $end
     $var wire 1 C! auto_out_wlast $end
     $var wire 1 D! auto_out_bready $end
     $var wire 1 &* auto_out_bvalid $end
     $var wire 4 '* auto_out_bid [3:0] $end
     $var wire 2 Z' auto_out_bresp [1:0] $end
     $var wire 1 E! auto_out_arready $end
     $var wire 1 F! auto_out_arvalid $end
     $var wire 4 G! auto_out_arid [3:0] $end
     $var wire 32 H! auto_out_araddr [31:0] $end
     $var wire 8 I! auto_out_arlen [7:0] $end
     $var wire 3 J! auto_out_arsize [2:0] $end
     $var wire 2 K! auto_out_arburst [1:0] $end
     $var wire 1 L! auto_out_rready $end
     $var wire 1 (* auto_out_rvalid $end
     $var wire 4 )* auto_out_rid [3:0] $end
     $var wire 64 [' auto_out_rdata [63:0] $end
     $var wire 2 ]' auto_out_rresp [1:0] $end
     $var wire 1 ^' auto_out_rlast $end
    $upscope $end
    $scope module axi4xbar_1 $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 ?* auto_in_awready $end
     $var wire 1 D" auto_in_awvalid $end
     $var wire 4 y auto_in_awid [3:0] $end
     $var wire 32 z auto_in_awaddr [31:0] $end
     $var wire 3 { auto_in_awsize [2:0] $end
     $var wire 1 +* auto_in_wready $end
     $var wire 1 O! auto_in_wvalid $end
     $var wire 64 } auto_in_wdata [63:0] $end
     $var wire 8 !! auto_in_wstrb [7:0] $end
     $var wire 1 P! auto_in_wlast $end
     $var wire 1 ,* auto_in_bready $end
     $var wire 1 -* auto_in_bvalid $end
     $var wire 4 '* auto_in_bid [3:0] $end
     $var wire 2 .* auto_in_bresp [1:0] $end
     $var wire 1 @* auto_in_arready $end
     $var wire 1 E" auto_in_arvalid $end
     $var wire 4 &! auto_in_arid [3:0] $end
     $var wire 32 '! auto_in_araddr [31:0] $end
     $var wire 3 (! auto_in_arsize [2:0] $end
     $var wire 1 L! auto_in_rready $end
     $var wire 1 (* auto_in_rvalid $end
     $var wire 4 )* auto_in_rid [3:0] $end
     $var wire 64 [' auto_in_rdata [63:0] $end
     $var wire 2 ]' auto_in_rresp [1:0] $end
     $var wire 1 1* auto_in_rlast $end
     $var wire 1 9* auto_out_2_awready $end
     $var wire 1 '" auto_out_2_awvalid $end
     $var wire 4 y auto_out_2_awid [3:0] $end
     $var wire 28 (" auto_out_2_awaddr [27:0] $end
     $var wire 1 `' auto_out_2_wready $end
     $var wire 1 )" auto_out_2_wvalid $end
     $var wire 64 } auto_out_2_wdata [63:0] $end
     $var wire 8 !! auto_out_2_wstrb [7:0] $end
     $var wire 1 :* auto_out_2_bready $end
     $var wire 1 *" auto_out_2_bvalid $end
     $var wire 4 +" auto_out_2_bid [3:0] $end
     $var wire 2 ," auto_out_2_bresp [1:0] $end
     $var wire 1 ;* auto_out_2_arready $end
     $var wire 1 -" auto_out_2_arvalid $end
     $var wire 4 &! auto_out_2_arid [3:0] $end
     $var wire 28 ." auto_out_2_araddr [27:0] $end
     $var wire 1 <* auto_out_2_rready $end
     $var wire 1 /" auto_out_2_rvalid $end
     $var wire 4 0" auto_out_2_rid [3:0] $end
     $var wire 64 1" auto_out_2_rdata [63:0] $end
     $var wire 2 3" auto_out_2_rresp [1:0] $end
     $var wire 1 F" auto_out_1_awvalid $end
     $var wire 1 G" auto_out_1_wvalid $end
     $var wire 1 H" auto_out_1_arready $end
     $var wire 1 I" auto_out_1_arvalid $end
     $var wire 4 &! auto_out_1_arid [3:0] $end
     $var wire 30 J" auto_out_1_araddr [29:0] $end
     $var wire 3 (! auto_out_1_arsize [2:0] $end
     $var wire 1 a' auto_out_1_rready $end
     $var wire 1 K" auto_out_1_rvalid $end
     $var wire 4 L" auto_out_1_rid [3:0] $end
     $var wire 64 M" auto_out_1_rdata [63:0] $end
     $var wire 1 w auto_out_0_awready $end
     $var wire 1 x auto_out_0_awvalid $end
     $var wire 4 y auto_out_0_awid [3:0] $end
     $var wire 32 z auto_out_0_awaddr [31:0] $end
     $var wire 3 { auto_out_0_awsize [2:0] $end
     $var wire 1 w auto_out_0_wready $end
     $var wire 1 | auto_out_0_wvalid $end
     $var wire 64 } auto_out_0_wdata [63:0] $end
     $var wire 8 !! auto_out_0_wstrb [7:0] $end
     $var wire 1 "* auto_out_0_bready $end
     $var wire 1 #* auto_out_0_bvalid $end
     $var wire 4 "! auto_out_0_bid [3:0] $end
     $var wire 2 #! auto_out_0_bresp [1:0] $end
     $var wire 1 $! auto_out_0_arready $end
     $var wire 1 %! auto_out_0_arvalid $end
     $var wire 4 &! auto_out_0_arid [3:0] $end
     $var wire 32 '! auto_out_0_araddr [31:0] $end
     $var wire 3 (! auto_out_0_arsize [2:0] $end
     $var wire 1 $* auto_out_0_rready $end
     $var wire 1 %* auto_out_0_rvalid $end
     $var wire 4 )! auto_out_0_rid [3:0] $end
     $var wire 64 X' auto_out_0_rdata [63:0] $end
     $var wire 2 #! auto_out_0_rresp [1:0] $end
     $var wire 1 -* in_0_bvalid $end
     $var wire 1 (* in_0_rvalid $end
     $var wire 1 ?* nodeIn_awready $end
     $var wire 1 O" requestARIO_0_0 $end
     $var wire 1 P" requestARIO_0_1 $end
     $var wire 1 Q" requestARIO_0_2 $end
     $var wire 1 R" requestAWIO_0_0 $end
     $var wire 1 S" requestAWIO_0_1 $end
     $var wire 1 T" requestAWIO_0_2 $end
     $var wire 1 U" arFIFOMap_0_count $end
     $var wire 1 V" awFIFOMap_0_count $end
     $var wire 1 W" arFIFOMap_1_count $end
     $var wire 1 X" awFIFOMap_1_count $end
     $var wire 1 Y" arFIFOMap_2_count $end
     $var wire 1 Z" awFIFOMap_2_count $end
     $var wire 1 [" arFIFOMap_3_count $end
     $var wire 1 \" awFIFOMap_3_count $end
     $var wire 1 ]" arFIFOMap_4_count $end
     $var wire 1 ^" awFIFOMap_4_count $end
     $var wire 1 _" arFIFOMap_5_count $end
     $var wire 1 `" awFIFOMap_5_count $end
     $var wire 1 a" arFIFOMap_6_count $end
     $var wire 1 b" awFIFOMap_6_count $end
     $var wire 1 c" arFIFOMap_7_count $end
     $var wire 1 d" awFIFOMap_7_count $end
     $var wire 1 e" arFIFOMap_8_count $end
     $var wire 1 f" awFIFOMap_8_count $end
     $var wire 1 g" arFIFOMap_9_count $end
     $var wire 1 h" awFIFOMap_9_count $end
     $var wire 1 i" arFIFOMap_10_count $end
     $var wire 1 j" awFIFOMap_10_count $end
     $var wire 1 k" arFIFOMap_11_count $end
     $var wire 1 l" awFIFOMap_11_count $end
     $var wire 1 m" arFIFOMap_12_count $end
     $var wire 1 n" awFIFOMap_12_count $end
     $var wire 1 o" arFIFOMap_13_count $end
     $var wire 1 p" awFIFOMap_13_count $end
     $var wire 1 q" arFIFOMap_14_count $end
     $var wire 1 r" awFIFOMap_14_count $end
     $var wire 1 s" arFIFOMap_15_count $end
     $var wire 1 t" awFIFOMap_15_count $end
     $var wire 1 u" latched $end
     $var wire 1 v" in_0_awvalid $end
     $var wire 1 w" awIn_0_io_enq_valid $end
     $var wire 1 x" in_0_wvalid $end
     $var wire 1 y" idle_3 $end
     $var wire 1 A* anyValid $end
     $var wire 3 B* readys_valid [2:0] $end
     $var wire 3 z" readys_mask [2:0] $end
     $var wire 3 C* readys_readys [2:0] $end
     $var wire 1 D* prefixOR_1 $end
     $var wire 1 E* winner_3_1 $end
     $var wire 1 F* winner_3_2 $end
     $var wire 1 {" state_3_0 $end
     $var wire 1 |" state_3_1 $end
     $var wire 1 }" state_3_2 $end
     $var wire 1 G* muxState_3_0 $end
     $var wire 1 H* muxState_3_1 $end
     $var wire 1 I* muxState_3_2 $end
     $var wire 1 ~" idle_4 $end
     $var wire 1 J* anyValid_1 $end
     $var wire 3 K* readys_valid_1 [2:0] $end
     $var wire 3 !# readys_mask_1 [2:0] $end
     $var wire 3 L* readys_readys_1 [2:0] $end
     $var wire 1 M* winner_4_0 $end
     $var wire 1 N* winner_4_2 $end
     $var wire 1 "# state_4_0 $end
     $var wire 1 ## state_4_2 $end
     $var wire 1 O* muxState_4_0 $end
     $var wire 1 P* muxState_4_2 $end
     $scope module awIn_0 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 $# io_enq_ready $end
      $var wire 1 w" io_enq_valid $end
      $var wire 3 %# io_enq_bits [2:0] $end
      $var wire 1 Q* io_deq_ready $end
      $var wire 1 &# io_deq_valid $end
      $var wire 3 '# io_deq_bits [2:0] $end
      $var wire 1 (# wrap $end
      $var wire 1 )# wrap_1 $end
      $var wire 1 *# maybe_full $end
      $var wire 1 +# ptr_match $end
      $var wire 1 ,# empty $end
      $var wire 1 -# full $end
      $var wire 1 &# io_deq_valid_0 $end
      $var wire 1 R* do_deq $end
      $var wire 1 S* do_enq $end
      $scope module ram_ext $end
       $var wire 1 )# R0_addr $end
       $var wire 1 S+ R0_en $end
       $var wire 1 )+ R0_clk $end
       $var wire 3 .# R0_data [2:0] $end
       $var wire 1 (# W0_addr $end
       $var wire 1 S* W0_en $end
       $var wire 1 )+ W0_clk $end
       $var wire 3 %# W0_data [2:0] $end
       $var wire 3 /# Memory[0] [2:0] $end
       $var wire 3 0# Memory[1] [2:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module axi4yank $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 ** auto_in_awready $end
     $var wire 1 M! auto_in_awvalid $end
     $var wire 4 y auto_in_awid [3:0] $end
     $var wire 32 z auto_in_awaddr [31:0] $end
     $var wire 3 { auto_in_awsize [2:0] $end
     $var wire 1 N! auto_in_awecho_real_last $end
     $var wire 1 +* auto_in_wready $end
     $var wire 1 O! auto_in_wvalid $end
     $var wire 64 } auto_in_wdata [63:0] $end
     $var wire 8 !! auto_in_wstrb [7:0] $end
     $var wire 1 P! auto_in_wlast $end
     $var wire 1 ,* auto_in_bready $end
     $var wire 1 -* auto_in_bvalid $end
     $var wire 4 '* auto_in_bid [3:0] $end
     $var wire 2 .* auto_in_bresp [1:0] $end
     $var wire 1 /* auto_in_becho_real_last $end
     $var wire 1 0* auto_in_arready $end
     $var wire 1 Q! auto_in_arvalid $end
     $var wire 4 &! auto_in_arid [3:0] $end
     $var wire 32 '! auto_in_araddr [31:0] $end
     $var wire 3 (! auto_in_arsize [2:0] $end
     $var wire 1 R! auto_in_arecho_real_last $end
     $var wire 1 L! auto_in_rready $end
     $var wire 1 (* auto_in_rvalid $end
     $var wire 4 )* auto_in_rid [3:0] $end
     $var wire 64 [' auto_in_rdata [63:0] $end
     $var wire 2 ]' auto_in_rresp [1:0] $end
     $var wire 1 _' auto_in_recho_real_last $end
     $var wire 1 1* auto_in_rlast $end
     $var wire 1 ?* auto_out_awready $end
     $var wire 1 D" auto_out_awvalid $end
     $var wire 4 y auto_out_awid [3:0] $end
     $var wire 32 z auto_out_awaddr [31:0] $end
     $var wire 3 { auto_out_awsize [2:0] $end
     $var wire 1 +* auto_out_wready $end
     $var wire 1 O! auto_out_wvalid $end
     $var wire 64 } auto_out_wdata [63:0] $end
     $var wire 8 !! auto_out_wstrb [7:0] $end
     $var wire 1 P! auto_out_wlast $end
     $var wire 1 ,* auto_out_bready $end
     $var wire 1 -* auto_out_bvalid $end
     $var wire 4 '* auto_out_bid [3:0] $end
     $var wire 2 .* auto_out_bresp [1:0] $end
     $var wire 1 @* auto_out_arready $end
     $var wire 1 E" auto_out_arvalid $end
     $var wire 4 &! auto_out_arid [3:0] $end
     $var wire 32 '! auto_out_araddr [31:0] $end
     $var wire 3 (! auto_out_arsize [2:0] $end
     $var wire 1 L! auto_out_rready $end
     $var wire 1 (* auto_out_rvalid $end
     $var wire 4 )* auto_out_rid [3:0] $end
     $var wire 64 [' auto_out_rdata [63:0] $end
     $var wire 2 ]' auto_out_rresp [1:0] $end
     $var wire 1 1* auto_out_rlast $end
     $scope module Queue1_BundleMap $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 1# io_enq_ready $end
      $var wire 1 b' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 T* io_deq_ready $end
      $var wire 1 2# io_deq_valid $end
      $var wire 1 3# io_deq_bits_real_last $end
      $var wire 1 3# ram_real_last $end
      $var wire 1 2# full $end
      $scope module unnamedblk1 $end
       $var wire 1 4# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_1 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 5# io_enq_ready $end
      $var wire 1 c' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 U* io_deq_ready $end
      $var wire 1 6# io_deq_valid $end
      $var wire 1 7# io_deq_bits_real_last $end
      $var wire 1 7# ram_real_last $end
      $var wire 1 6# full $end
      $scope module unnamedblk1 $end
       $var wire 1 8# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_10 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 9# io_enq_ready $end
      $var wire 1 d' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 V* io_deq_ready $end
      $var wire 1 :# io_deq_valid $end
      $var wire 1 ;# io_deq_bits_real_last $end
      $var wire 1 ;# ram_real_last $end
      $var wire 1 :# full $end
      $scope module unnamedblk1 $end
       $var wire 1 <# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_11 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 =# io_enq_ready $end
      $var wire 1 e' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 W* io_deq_ready $end
      $var wire 1 ># io_deq_valid $end
      $var wire 1 ?# io_deq_bits_real_last $end
      $var wire 1 ?# ram_real_last $end
      $var wire 1 ># full $end
      $scope module unnamedblk1 $end
       $var wire 1 @# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_12 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 A# io_enq_ready $end
      $var wire 1 f' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 X* io_deq_ready $end
      $var wire 1 B# io_deq_valid $end
      $var wire 1 C# io_deq_bits_real_last $end
      $var wire 1 C# ram_real_last $end
      $var wire 1 B# full $end
      $scope module unnamedblk1 $end
       $var wire 1 D# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_13 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 E# io_enq_ready $end
      $var wire 1 g' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 Y* io_deq_ready $end
      $var wire 1 F# io_deq_valid $end
      $var wire 1 G# io_deq_bits_real_last $end
      $var wire 1 G# ram_real_last $end
      $var wire 1 F# full $end
      $scope module unnamedblk1 $end
       $var wire 1 H# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_14 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 I# io_enq_ready $end
      $var wire 1 h' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 Z* io_deq_ready $end
      $var wire 1 J# io_deq_valid $end
      $var wire 1 K# io_deq_bits_real_last $end
      $var wire 1 K# ram_real_last $end
      $var wire 1 J# full $end
      $scope module unnamedblk1 $end
       $var wire 1 L# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_15 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 M# io_enq_ready $end
      $var wire 1 i' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 [* io_deq_ready $end
      $var wire 1 N# io_deq_valid $end
      $var wire 1 O# io_deq_bits_real_last $end
      $var wire 1 O# ram_real_last $end
      $var wire 1 N# full $end
      $scope module unnamedblk1 $end
       $var wire 1 P# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_16 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 Q# io_enq_ready $end
      $var wire 1 j' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 \* io_deq_ready $end
      $var wire 1 R# io_deq_valid $end
      $var wire 1 S# io_deq_bits_real_last $end
      $var wire 1 S# ram_real_last $end
      $var wire 1 R# full $end
      $scope module unnamedblk1 $end
       $var wire 1 T# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_17 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 U# io_enq_ready $end
      $var wire 1 k' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 ]* io_deq_ready $end
      $var wire 1 V# io_deq_valid $end
      $var wire 1 W# io_deq_bits_real_last $end
      $var wire 1 W# ram_real_last $end
      $var wire 1 V# full $end
      $scope module unnamedblk1 $end
       $var wire 1 X# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_18 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 Y# io_enq_ready $end
      $var wire 1 l' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 ^* io_deq_ready $end
      $var wire 1 Z# io_deq_valid $end
      $var wire 1 [# io_deq_bits_real_last $end
      $var wire 1 [# ram_real_last $end
      $var wire 1 Z# full $end
      $scope module unnamedblk1 $end
       $var wire 1 \# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_19 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 ]# io_enq_ready $end
      $var wire 1 m' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 _* io_deq_ready $end
      $var wire 1 ^# io_deq_valid $end
      $var wire 1 _# io_deq_bits_real_last $end
      $var wire 1 _# ram_real_last $end
      $var wire 1 ^# full $end
      $scope module unnamedblk1 $end
       $var wire 1 `# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_2 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 a# io_enq_ready $end
      $var wire 1 n' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 `* io_deq_ready $end
      $var wire 1 b# io_deq_valid $end
      $var wire 1 c# io_deq_bits_real_last $end
      $var wire 1 c# ram_real_last $end
      $var wire 1 b# full $end
      $scope module unnamedblk1 $end
       $var wire 1 d# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_20 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 e# io_enq_ready $end
      $var wire 1 o' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 a* io_deq_ready $end
      $var wire 1 f# io_deq_valid $end
      $var wire 1 g# io_deq_bits_real_last $end
      $var wire 1 g# ram_real_last $end
      $var wire 1 f# full $end
      $scope module unnamedblk1 $end
       $var wire 1 h# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_21 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 i# io_enq_ready $end
      $var wire 1 p' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 b* io_deq_ready $end
      $var wire 1 j# io_deq_valid $end
      $var wire 1 k# io_deq_bits_real_last $end
      $var wire 1 k# ram_real_last $end
      $var wire 1 j# full $end
      $scope module unnamedblk1 $end
       $var wire 1 l# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_22 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 m# io_enq_ready $end
      $var wire 1 q' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 c* io_deq_ready $end
      $var wire 1 n# io_deq_valid $end
      $var wire 1 o# io_deq_bits_real_last $end
      $var wire 1 o# ram_real_last $end
      $var wire 1 n# full $end
      $scope module unnamedblk1 $end
       $var wire 1 p# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_23 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 q# io_enq_ready $end
      $var wire 1 r' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 d* io_deq_ready $end
      $var wire 1 r# io_deq_valid $end
      $var wire 1 s# io_deq_bits_real_last $end
      $var wire 1 s# ram_real_last $end
      $var wire 1 r# full $end
      $scope module unnamedblk1 $end
       $var wire 1 t# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_24 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 u# io_enq_ready $end
      $var wire 1 s' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 e* io_deq_ready $end
      $var wire 1 v# io_deq_valid $end
      $var wire 1 w# io_deq_bits_real_last $end
      $var wire 1 w# ram_real_last $end
      $var wire 1 v# full $end
      $scope module unnamedblk1 $end
       $var wire 1 x# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_25 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 y# io_enq_ready $end
      $var wire 1 t' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 f* io_deq_ready $end
      $var wire 1 z# io_deq_valid $end
      $var wire 1 {# io_deq_bits_real_last $end
      $var wire 1 {# ram_real_last $end
      $var wire 1 z# full $end
      $scope module unnamedblk1 $end
       $var wire 1 |# do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_26 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 }# io_enq_ready $end
      $var wire 1 u' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 g* io_deq_ready $end
      $var wire 1 ~# io_deq_valid $end
      $var wire 1 !$ io_deq_bits_real_last $end
      $var wire 1 !$ ram_real_last $end
      $var wire 1 ~# full $end
      $scope module unnamedblk1 $end
       $var wire 1 "$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_27 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 #$ io_enq_ready $end
      $var wire 1 v' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 h* io_deq_ready $end
      $var wire 1 $$ io_deq_valid $end
      $var wire 1 %$ io_deq_bits_real_last $end
      $var wire 1 %$ ram_real_last $end
      $var wire 1 $$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 &$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_28 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 '$ io_enq_ready $end
      $var wire 1 w' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 i* io_deq_ready $end
      $var wire 1 ($ io_deq_valid $end
      $var wire 1 )$ io_deq_bits_real_last $end
      $var wire 1 )$ ram_real_last $end
      $var wire 1 ($ full $end
      $scope module unnamedblk1 $end
       $var wire 1 *$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_29 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 +$ io_enq_ready $end
      $var wire 1 x' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 j* io_deq_ready $end
      $var wire 1 ,$ io_deq_valid $end
      $var wire 1 -$ io_deq_bits_real_last $end
      $var wire 1 -$ ram_real_last $end
      $var wire 1 ,$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 .$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_3 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 /$ io_enq_ready $end
      $var wire 1 y' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 k* io_deq_ready $end
      $var wire 1 0$ io_deq_valid $end
      $var wire 1 1$ io_deq_bits_real_last $end
      $var wire 1 1$ ram_real_last $end
      $var wire 1 0$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 2$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_30 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 3$ io_enq_ready $end
      $var wire 1 z' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 l* io_deq_ready $end
      $var wire 1 4$ io_deq_valid $end
      $var wire 1 5$ io_deq_bits_real_last $end
      $var wire 1 5$ ram_real_last $end
      $var wire 1 4$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 6$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_31 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 7$ io_enq_ready $end
      $var wire 1 {' io_enq_valid $end
      $var wire 1 N! io_enq_bits_real_last $end
      $var wire 1 m* io_deq_ready $end
      $var wire 1 8$ io_deq_valid $end
      $var wire 1 9$ io_deq_bits_real_last $end
      $var wire 1 9$ ram_real_last $end
      $var wire 1 8$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 :$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_4 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 ;$ io_enq_ready $end
      $var wire 1 |' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 n* io_deq_ready $end
      $var wire 1 <$ io_deq_valid $end
      $var wire 1 =$ io_deq_bits_real_last $end
      $var wire 1 =$ ram_real_last $end
      $var wire 1 <$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 >$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_5 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 ?$ io_enq_ready $end
      $var wire 1 }' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 o* io_deq_ready $end
      $var wire 1 @$ io_deq_valid $end
      $var wire 1 A$ io_deq_bits_real_last $end
      $var wire 1 A$ ram_real_last $end
      $var wire 1 @$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 B$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_6 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 C$ io_enq_ready $end
      $var wire 1 ~' io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 p* io_deq_ready $end
      $var wire 1 D$ io_deq_valid $end
      $var wire 1 E$ io_deq_bits_real_last $end
      $var wire 1 E$ ram_real_last $end
      $var wire 1 D$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 F$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_7 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 G$ io_enq_ready $end
      $var wire 1 !( io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 q* io_deq_ready $end
      $var wire 1 H$ io_deq_valid $end
      $var wire 1 I$ io_deq_bits_real_last $end
      $var wire 1 I$ ram_real_last $end
      $var wire 1 H$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 J$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_8 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 K$ io_enq_ready $end
      $var wire 1 "( io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 r* io_deq_ready $end
      $var wire 1 L$ io_deq_valid $end
      $var wire 1 M$ io_deq_bits_real_last $end
      $var wire 1 M$ ram_real_last $end
      $var wire 1 L$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 N$ do_enq $end
      $upscope $end
     $upscope $end
     $scope module Queue1_BundleMap_9 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 1 O$ io_enq_ready $end
      $var wire 1 #( io_enq_valid $end
      $var wire 1 R! io_enq_bits_real_last $end
      $var wire 1 s* io_deq_ready $end
      $var wire 1 P$ io_deq_valid $end
      $var wire 1 Q$ io_deq_bits_real_last $end
      $var wire 1 Q$ ram_real_last $end
      $var wire 1 P$ full $end
      $scope module unnamedblk1 $end
       $var wire 1 R$ do_enq $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module cpu $end
     $var wire 1 )+ clock $end
     $var wire 1 C+ reset $end
     $var wire 1 7! auto_master_out_awready $end
     $var wire 1 8! auto_master_out_awvalid $end
     $var wire 4 9! auto_master_out_awid [3:0] $end
     $var wire 32 :! auto_master_out_awaddr [31:0] $end
     $var wire 8 ;! auto_master_out_awlen [7:0] $end
     $var wire 3 <! auto_master_out_awsize [2:0] $end
     $var wire 2 =! auto_master_out_awburst [1:0] $end
     $var wire 1 >! auto_master_out_wready $end
     $var wire 1 ?! auto_master_out_wvalid $end
     $var wire 64 @! auto_master_out_wdata [63:0] $end
     $var wire 8 B! auto_master_out_wstrb [7:0] $end
     $var wire 1 C! auto_master_out_wlast $end
     $var wire 1 D! auto_master_out_bready $end
     $var wire 1 &* auto_master_out_bvalid $end
     $var wire 4 '* auto_master_out_bid [3:0] $end
     $var wire 2 Z' auto_master_out_bresp [1:0] $end
     $var wire 1 E! auto_master_out_arready $end
     $var wire 1 F! auto_master_out_arvalid $end
     $var wire 4 G! auto_master_out_arid [3:0] $end
     $var wire 32 H! auto_master_out_araddr [31:0] $end
     $var wire 8 I! auto_master_out_arlen [7:0] $end
     $var wire 3 J! auto_master_out_arsize [2:0] $end
     $var wire 2 K! auto_master_out_arburst [1:0] $end
     $var wire 1 L! auto_master_out_rready $end
     $var wire 1 (* auto_master_out_rvalid $end
     $var wire 4 )* auto_master_out_rid [3:0] $end
     $var wire 64 [' auto_master_out_rdata [63:0] $end
     $var wire 2 ]' auto_master_out_rresp [1:0] $end
     $var wire 1 ^' auto_master_out_rlast $end
     $scope module cpu $end
      $var wire 1 )+ clock $end
      $var wire 1 C+ reset $end
      $var wire 1 P+ io_interrupt $end
      $var wire 1 7! io_master_awready $end
      $var wire 1 8! io_master_awvalid $end
      $var wire 4 9! io_master_awid [3:0] $end
      $var wire 32 :! io_master_awaddr [31:0] $end
      $var wire 8 ;! io_master_awlen [7:0] $end
      $var wire 3 <! io_master_awsize [2:0] $end
      $var wire 2 =! io_master_awburst [1:0] $end
      $var wire 1 >! io_master_wready $end
      $var wire 1 ?! io_master_wvalid $end
      $var wire 64 @! io_master_wdata [63:0] $end
      $var wire 8 B! io_master_wstrb [7:0] $end
      $var wire 1 C! io_master_wlast $end
      $var wire 1 D! io_master_bready $end
      $var wire 1 &* io_master_bvalid $end
      $var wire 4 '* io_master_bid [3:0] $end
      $var wire 2 Z' io_master_bresp [1:0] $end
      $var wire 1 E! io_master_arready $end
      $var wire 1 F! io_master_arvalid $end
      $var wire 4 G! io_master_arid [3:0] $end
      $var wire 32 H! io_master_araddr [31:0] $end
      $var wire 8 I! io_master_arlen [7:0] $end
      $var wire 3 J! io_master_arsize [2:0] $end
      $var wire 2 K! io_master_arburst [1:0] $end
      $var wire 1 L! io_master_rready $end
      $var wire 1 (* io_master_rvalid $end
      $var wire 4 )* io_master_rid [3:0] $end
      $var wire 64 [' io_master_rdata [63:0] $end
      $var wire 2 ]' io_master_rresp [1:0] $end
      $var wire 1 ^' io_master_rlast $end
      $var wire 1 P+ io_slave_awready $end
      $var wire 1 P+ io_slave_awvalid $end
      $var wire 4 T+ io_slave_awid [3:0] $end
      $var wire 32 Q+ io_slave_awaddr [31:0] $end
      $var wire 8 U+ io_slave_awlen [7:0] $end
      $var wire 3 V+ io_slave_awsize [2:0] $end
      $var wire 2 R+ io_slave_awburst [1:0] $end
      $var wire 1 P+ io_slave_wready $end
      $var wire 1 P+ io_slave_wvalid $end
      $var wire 64 W+ io_slave_wdata [63:0] $end
      $var wire 8 U+ io_slave_wstrb [7:0] $end
      $var wire 1 P+ io_slave_wlast $end
      $var wire 1 P+ io_slave_bready $end
      $var wire 1 P+ io_slave_bvalid $end
      $var wire 4 T+ io_slave_bid [3:0] $end
      $var wire 2 R+ io_slave_bresp [1:0] $end
      $var wire 1 P+ io_slave_arready $end
      $var wire 1 P+ io_slave_arvalid $end
      $var wire 4 T+ io_slave_arid [3:0] $end
      $var wire 32 Q+ io_slave_araddr [31:0] $end
      $var wire 8 U+ io_slave_arlen [7:0] $end
      $var wire 3 V+ io_slave_arsize [2:0] $end
      $var wire 2 R+ io_slave_arburst [1:0] $end
      $var wire 1 P+ io_slave_rready $end
      $var wire 1 P+ io_slave_rvalid $end
      $var wire 4 T+ io_slave_rid [3:0] $end
      $var wire 64 W+ io_slave_rdata [63:0] $end
      $var wire 2 R+ io_slave_rresp [1:0] $end
      $var wire 1 P+ io_slave_rlast $end
      $var wire 32 S$ PC [31:0] $end
      $var wire 32 T$ Instr [31:0] $end
      $var wire 32 U$ ReadData [31:0] $end
      $var wire 32 V$ DataAdr [31:0] $end
      $var wire 32 W$ mask [31:0] $end
      $var wire 32 X$ WriteData [31:0] $end
      $var wire 1 Y$ MemWrite $end
      $var wire 1 Z$ io_master_awready_m $end
      $var wire 1 [$ io_master_awvalid_m $end
      $var wire 32 \$ io_master_awaddr_m [31:0] $end
      $var wire 4 T+ io_master_awid_m [3:0] $end
      $var wire 8 Y+ io_master_awlen_m [7:0] $end
      $var wire 3 Z+ io_master_awsize_m [2:0] $end
      $var wire 2 [+ io_master_awburst_m [1:0] $end
      $var wire 1 ]$ io_master_wready_m $end
      $var wire 1 ^$ io_master_wvalid_m $end
      $var wire 64 _$ io_master_wdata_m [63:0] $end
      $var wire 8 \+ io_master_wstrb_m [7:0] $end
      $var wire 1 a$ io_master_wlast_m $end
      $var wire 1 S+ io_master_bready_m $end
      $var wire 1 b$ io_master_bvalid_m $end
      $var wire 2 c$ io_master_bresp_m [1:0] $end
      $var wire 4 d$ io_master_bid_m [3:0] $end
      $var wire 1 e$ io_master_arready_m $end
      $var wire 1 f$ io_master_arvalid_m $end
      $var wire 32 g$ io_master_araddr_m [31:0] $end
      $var wire 4 T+ io_master_arid_m [3:0] $end
      $var wire 8 Y+ io_master_arlen_m [7:0] $end
      $var wire 3 Z+ io_master_arsize_m [2:0] $end
      $var wire 2 [+ io_master_arburst_m [1:0] $end
      $var wire 1 h$ io_master_rready_m $end
      $var wire 1 i$ io_master_rvalid_m $end
      $var wire 2 j$ io_master_rresp_m [1:0] $end
      $var wire 64 k$ io_master_rdata_m [63:0] $end
      $var wire 1 m$ io_master_rlast_m $end
      $var wire 4 n$ io_master_rid_m [3:0] $end
      $var wire 1 o$ io_master_awready_s $end
      $var wire 1 p$ io_master_awvalid_s $end
      $var wire 32 q$ io_master_awaddr_s [31:0] $end
      $var wire 4 T+ io_master_awid_s [3:0] $end
      $var wire 8 Y+ io_master_awlen_s [7:0] $end
      $var wire 3 Z+ io_master_awsize_s [2:0] $end
      $var wire 2 [+ io_master_awburst_s [1:0] $end
      $var wire 1 r$ io_master_wready_s $end
      $var wire 1 s$ io_master_wvalid_s $end
      $var wire 64 t$ io_master_wdata_s [63:0] $end
      $var wire 8 \+ io_master_wstrb_s [7:0] $end
      $var wire 1 v$ io_master_wlast_s $end
      $var wire 1 S+ io_master_bready_s $end
      $var wire 1 w$ io_master_bvalid_s $end
      $var wire 2 x$ io_master_bresp_s [1:0] $end
      $var wire 4 y$ io_master_bid_s [3:0] $end
      $var wire 1 z$ io_master_arready_s $end
      $var wire 1 {$ io_master_arvalid_s $end
      $var wire 32 |$ io_master_araddr_s [31:0] $end
      $var wire 4 T+ io_master_arid_s [3:0] $end
      $var wire 8 Y+ io_master_arlen_s [7:0] $end
      $var wire 3 Z+ io_master_arsize_s [2:0] $end
      $var wire 2 [+ io_master_arburst_s [1:0] $end
      $var wire 1 }$ io_master_rready_s $end
      $var wire 1 ~$ io_master_rvalid_s $end
      $var wire 2 !% io_master_rresp_s [1:0] $end
      $var wire 64 "% io_master_rdata_s [63:0] $end
      $var wire 1 $% io_master_rlast_s $end
      $var wire 4 %% io_master_rid_s [3:0] $end
      $scope module axi_m_if $end
       $var wire 32 Q+ C_M_TARGET_SLAVE_BASE_ADDR [31:0] $end
       $var wire 8 Y+ C_M_AXI_BURST_LEN [7:0] $end
       $var wire 32 ]+ C_M_AXI_ID_WIDTH [31:0] $end
       $var wire 32 ^+ C_M_AXI_ADDR_WIDTH [31:0] $end
       $var wire 32 _+ C_M_AXI_DATA_WIDTH [31:0] $end
       $var wire 1 )+ M_AXI_ACLK $end
       $var wire 1 C+ M_AXI_ARESETN $end
       $var wire 32 S$ addr [31:0] $end
       $var wire 32 T$ read_data [31:0] $end
       $var wire 32 `+ write_data [31:0] $end
       $var wire 1 Z$ M_AXI_AWREADY $end
       $var wire 1 [$ M_AXI_AWVALID $end
       $var wire 32 \$ M_AXI_AWADDR [31:0] $end
       $var wire 4 T+ M_AXI_AWID [3:0] $end
       $var wire 8 Y+ M_AXI_AWLEN [7:0] $end
       $var wire 3 Z+ M_AXI_AWSIZE [2:0] $end
       $var wire 2 [+ M_AXI_AWBURST [1:0] $end
       $var wire 1 ]$ M_AXI_WREADY $end
       $var wire 1 ^$ M_AXI_WVALID $end
       $var wire 64 _$ M_AXI_WDATA [63:0] $end
       $var wire 8 \+ M_AXI_WSTRB [7:0] $end
       $var wire 1 a$ M_AXI_WLAST $end
       $var wire 1 S+ M_AXI_BREADY $end
       $var wire 1 b$ M_AXI_BVALID $end
       $var wire 2 c$ M_AXI_BRESP [1:0] $end
       $var wire 4 d$ M_AXI_BID [3:0] $end
       $var wire 1 e$ M_AXI_ARREADY $end
       $var wire 1 f$ M_AXI_ARVALID $end
       $var wire 32 g$ M_AXI_ARADDR [31:0] $end
       $var wire 4 T+ M_AXI_ARID [3:0] $end
       $var wire 8 Y+ M_AXI_ARLEN [7:0] $end
       $var wire 3 Z+ M_AXI_ARSIZE [2:0] $end
       $var wire 2 [+ M_AXI_ARBURST [1:0] $end
       $var wire 1 h$ M_AXI_RREADY $end
       $var wire 1 i$ M_AXI_RVALID $end
       $var wire 2 j$ M_AXI_RRESP [1:0] $end
       $var wire 64 k$ M_AXI_RDATA [63:0] $end
       $var wire 1 m$ M_AXI_RLAST $end
       $var wire 4 n$ M_AXI_RID [3:0] $end
       $var wire 32 Q+ P_ST_IDLE [31:0] $end
       $var wire 32 a+ P_ST_WRITE_START [31:0] $end
       $var wire 32 b+ P_ST_WRITE_TRANS [31:0] $end
       $var wire 32 c+ P_ST_WRITE_END [31:0] $end
       $var wire 32 d+ P_ST_READ_START [31:0] $end
       $var wire 32 e+ P_ST_READ_TRANS [31:0] $end
       $var wire 32 f+ P_ST_READ_END [31:0] $end
       $var wire 8 &% r_st_current_write [7:0] $end
       $var wire 8 '% r_st_next_write [7:0] $end
       $var wire 8 (% r_st_current_read [7:0] $end
       $var wire 8 )% r_st_next_read [7:0] $end
       $var wire 32 \$ r_m_axi_awaddr [31:0] $end
       $var wire 1 [$ r_m_axi_awvalid $end
       $var wire 64 _$ r_m_axi_wdata [63:0] $end
       $var wire 1 *% r_m_axi_wlast $end
       $var wire 1 ^$ r_m_axi_wvalid $end
       $var wire 32 g$ r_m_axi_araddr [31:0] $end
       $var wire 1 f$ r_m_axi_arvalid $end
       $var wire 1 h$ r_m_axi_rready $end
       $var wire 1 +% r_write_start $end
       $var wire 1 ,% r_read_start $end
       $var wire 8 -% r_burst_cnt [7:0] $end
       $var wire 64 .% r_axi_read_data [63:0] $end
       $var wire 1 C+ w_system_rst $end
       $var wire 1 a$ w_write_last $end
      $upscope $end
      $scope module axi_m_we $end
       $var wire 32 Q+ C_M_TARGET_SLAVE_BASE_ADDR [31:0] $end
       $var wire 8 Y+ C_M_AXI_BURST_LEN [7:0] $end
       $var wire 32 ]+ C_M_AXI_ID_WIDTH [31:0] $end
       $var wire 32 ^+ C_M_AXI_ADDR_WIDTH [31:0] $end
       $var wire 32 _+ C_M_AXI_DATA_WIDTH [31:0] $end
       $var wire 1 )+ M_AXI_ACLK $end
       $var wire 1 C+ M_AXI_ARESETN $end
       $var wire 32 V$ addr [31:0] $end
       $var wire 32 U$ read_data [31:0] $end
       $var wire 32 X$ write_data [31:0] $end
       $var wire 1 o$ M_AXI_AWREADY $end
       $var wire 1 p$ M_AXI_AWVALID $end
       $var wire 32 q$ M_AXI_AWADDR [31:0] $end
       $var wire 4 T+ M_AXI_AWID [3:0] $end
       $var wire 8 Y+ M_AXI_AWLEN [7:0] $end
       $var wire 3 Z+ M_AXI_AWSIZE [2:0] $end
       $var wire 2 [+ M_AXI_AWBURST [1:0] $end
       $var wire 1 r$ M_AXI_WREADY $end
       $var wire 1 s$ M_AXI_WVALID $end
       $var wire 64 t$ M_AXI_WDATA [63:0] $end
       $var wire 8 \+ M_AXI_WSTRB [7:0] $end
       $var wire 1 v$ M_AXI_WLAST $end
       $var wire 1 S+ M_AXI_BREADY $end
       $var wire 1 w$ M_AXI_BVALID $end
       $var wire 2 x$ M_AXI_BRESP [1:0] $end
       $var wire 4 y$ M_AXI_BID [3:0] $end
       $var wire 1 z$ M_AXI_ARREADY $end
       $var wire 1 {$ M_AXI_ARVALID $end
       $var wire 32 |$ M_AXI_ARADDR [31:0] $end
       $var wire 4 T+ M_AXI_ARID [3:0] $end
       $var wire 8 Y+ M_AXI_ARLEN [7:0] $end
       $var wire 3 Z+ M_AXI_ARSIZE [2:0] $end
       $var wire 2 [+ M_AXI_ARBURST [1:0] $end
       $var wire 1 }$ M_AXI_RREADY $end
       $var wire 1 ~$ M_AXI_RVALID $end
       $var wire 2 !% M_AXI_RRESP [1:0] $end
       $var wire 64 "% M_AXI_RDATA [63:0] $end
       $var wire 1 $% M_AXI_RLAST $end
       $var wire 4 %% M_AXI_RID [3:0] $end
       $var wire 32 Q+ P_ST_IDLE [31:0] $end
       $var wire 32 a+ P_ST_WRITE_START [31:0] $end
       $var wire 32 b+ P_ST_WRITE_TRANS [31:0] $end
       $var wire 32 c+ P_ST_WRITE_END [31:0] $end
       $var wire 32 d+ P_ST_READ_START [31:0] $end
       $var wire 32 e+ P_ST_READ_TRANS [31:0] $end
       $var wire 32 f+ P_ST_READ_END [31:0] $end
       $var wire 8 0% r_st_current_write [7:0] $end
       $var wire 8 1% r_st_next_write [7:0] $end
       $var wire 8 2% r_st_current_read [7:0] $end
       $var wire 8 3% r_st_next_read [7:0] $end
       $var wire 32 q$ r_m_axi_awaddr [31:0] $end
       $var wire 1 p$ r_m_axi_awvalid $end
       $var wire 64 t$ r_m_axi_wdata [63:0] $end
       $var wire 1 4% r_m_axi_wlast $end
       $var wire 1 s$ r_m_axi_wvalid $end
       $var wire 32 |$ r_m_axi_araddr [31:0] $end
       $var wire 1 {$ r_m_axi_arvalid $end
       $var wire 1 }$ r_m_axi_rready $end
       $var wire 1 5% r_write_start $end
       $var wire 1 6% r_read_start $end
       $var wire 8 7% r_burst_cnt [7:0] $end
       $var wire 64 8% r_axi_read_data [63:0] $end
       $var wire 1 C+ w_system_rst $end
       $var wire 1 v$ w_write_last $end
      $upscope $end
      $scope module rv $end
       $var wire 1 )+ clk $end
       $var wire 1 C+ reset $end
       $var wire 32 S$ PCF [31:0] $end
       $var wire 32 T$ Instr [31:0] $end
       $var wire 1 Y$ MemWrite $end
       $var wire 32 V$ ALUResultM [31:0] $end
       $var wire 32 X$ WriteData [31:0] $end
       $var wire 32 W$ mask [31:0] $end
       $var wire 32 U$ ReadData [31:0] $end
       $var wire 1 :% ALUSrcE $end
       $var wire 1 ;% RegWriteW $end
       $var wire 1 <% RegWriteM $end
       $var wire 1 =% Zero $end
       $var wire 1 >% stallD $end
       $var wire 1 ?% stallF $end
       $var wire 1 @% FlushD $end
       $var wire 1 A% FlushE $end
       $var wire 2 B% ResultSrcE [1:0] $end
       $var wire 1 C% loadW $end
       $var wire 1 D% less $end
       $var wire 1 E% jarlW $end
       $var wire 1 @% PCSrcE $end
       $var wire 2 F% ResultSrcW [1:0] $end
       $var wire 2 G% ResultSrcM [1:0] $end
       $var wire 3 H% ImmSrcD [2:0] $end
       $var wire 4 I% ALUControlE [3:0] $end
       $var wire 2 J% SDypeSecM [1:0] $end
       $var wire 2 K% ForWordAE [1:0] $end
       $var wire 2 L% ForWordBE [1:0] $end
       $var wire 5 M% RdW [4:0] $end
       $var wire 5 N% RdM [4:0] $end
       $var wire 5 O% RdE [4:0] $end
       $var wire 5 P% Rs1D [4:0] $end
       $var wire 5 Q% Rs2D [4:0] $end
       $var wire 5 R% Rs1E [4:0] $end
       $var wire 5 S% Rs2E [4:0] $end
       $var wire 32 T% InstrD [31:0] $end
       $scope module c $end
        $var wire 1 )+ clk $end
        $var wire 1 C+ reset $end
        $var wire 7 U% op [6:0] $end
        $var wire 3 V% funct3 [2:0] $end
        $var wire 1 W% funct7b5 $end
        $var wire 1 =% ZeroE $end
        $var wire 1 D% l $end
        $var wire 2 B% ResultSrcE [1:0] $end
        $var wire 2 F% ResultSrcW [1:0] $end
        $var wire 2 G% ResultSrcM [1:0] $end
        $var wire 1 Y$ MemWriteM $end
        $var wire 1 @% PCSrcE $end
        $var wire 1 :% ALUSrcE $end
        $var wire 1 C% loadW $end
        $var wire 1 E% jarlW $end
        $var wire 1 ;% RegWriteW $end
        $var wire 1 <% RegWriteM $end
        $var wire 3 H% ImmSrcD [2:0] $end
        $var wire 4 I% ALUControlE [3:0] $end
        $var wire 2 J% SDypeSecM [1:0] $end
        $var wire 1 A% FlushE $end
        $var wire 2 X% ALUOp [1:0] $end
        $var wire 2 Y% ResultSrcD [1:0] $end
        $var wire 1 Z% BranchD $end
        $var wire 1 [% JumpD $end
        $var wire 1 \% JumpE $end
        $var wire 1 ]% ALUSrcD $end
        $var wire 1 ^% BranchE $end
        $var wire 1 _% jarlD $end
        $var wire 1 `% jarlE $end
        $var wire 1 a% jarlM $end
        $var wire 4 b% ALUControlD [3:0] $end
        $var wire 2 c% SDypeSec [1:0] $end
        $var wire 2 d% SDypeSecE [1:0] $end
        $var wire 3 e% funct3E [2:0] $end
        $var wire 1 f% RegWriteE $end
        $var wire 1 g% RegWriteD $end
        $var wire 1 h% MemWriteE $end
        $var wire 1 i% MemWriteD $end
        $var wire 1 j% loadD $end
        $var wire 1 k% loadE $end
        $var wire 1 l% loadM $end
        $var wire 1 m% branchScr $end
        $scope module Ereg10 $end
         $var wire 32 g+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 2 Y% d [1:0] $end
         $var wire 2 B% q [1:0] $end
        $upscope $end
        $scope module Ereg11 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 1 i% d [0:0] $end
         $var wire 1 h% q [0:0] $end
        $upscope $end
        $scope module Ereg12 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 1 [% d [0:0] $end
         $var wire 1 \% q [0:0] $end
        $upscope $end
        $scope module Ereg13 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 1 Z% d [0:0] $end
         $var wire 1 ^% q [0:0] $end
        $upscope $end
        $scope module Ereg14 $end
         $var wire 32 i+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 4 b% d [3:0] $end
         $var wire 4 I% q [3:0] $end
        $upscope $end
        $scope module Ereg15 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 1 ]% d [0:0] $end
         $var wire 1 :% q [0:0] $end
        $upscope $end
        $scope module Ereg16 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 1 j% d [0:0] $end
         $var wire 1 k% q [0:0] $end
        $upscope $end
        $scope module Ereg17 $end
         $var wire 32 g+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 2 c% d [1:0] $end
         $var wire 2 d% q [1:0] $end
        $upscope $end
        $scope module Ereg18 $end
         $var wire 32 j+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 3 V% d [2:0] $end
         $var wire 3 e% q [2:0] $end
        $upscope $end
        $scope module Ereg19 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 1 _% d [0:0] $end
         $var wire 1 `% q [0:0] $end
        $upscope $end
        $scope module Ereg9 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 1 g% d [0:0] $end
         $var wire 1 f% q [0:0] $end
        $upscope $end
        $scope module Mreg10 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 `% d [0:0] $end
         $var wire 1 a% q [0:0] $end
        $upscope $end
        $scope module Mreg5 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 f% d [0:0] $end
         $var wire 1 <% q [0:0] $end
        $upscope $end
        $scope module Mreg6 $end
         $var wire 32 g+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 2 B% d [1:0] $end
         $var wire 2 G% q [1:0] $end
        $upscope $end
        $scope module Mreg7 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 h% d [0:0] $end
         $var wire 1 Y$ q [0:0] $end
        $upscope $end
        $scope module Mreg8 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 k% d [0:0] $end
         $var wire 1 l% q [0:0] $end
        $upscope $end
        $scope module Mreg9 $end
         $var wire 32 g+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 2 d% d [1:0] $end
         $var wire 2 J% q [1:0] $end
        $upscope $end
        $scope module SD $end
         $var wire 3 V% funct3 [2:0] $end
         $var wire 2 c% SDypeSec [1:0] $end
        $upscope $end
        $scope module Wreg5 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 <% d [0:0] $end
         $var wire 1 ;% q [0:0] $end
        $upscope $end
        $scope module Wreg6 $end
         $var wire 32 g+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 2 G% d [1:0] $end
         $var wire 2 F% q [1:0] $end
        $upscope $end
        $scope module Wreg7 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 l% d [0:0] $end
         $var wire 1 C% q [0:0] $end
        $upscope $end
        $scope module Wreg8 $end
         $var wire 32 h+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 a% d [0:0] $end
         $var wire 1 E% q [0:0] $end
        $upscope $end
        $scope module ad $end
         $var wire 1 n% opb5 $end
         $var wire 3 V% funct3 [2:0] $end
         $var wire 1 W% funct7b5 $end
         $var wire 2 X% ALUOp [1:0] $end
         $var wire 4 b% ALUControl [3:0] $end
         $var wire 1 o% RtypeSub $end
         $var wire 1 o% RtypeSra $end
        $upscope $end
        $scope module blu $end
         $var wire 3 e% funct3 [2:0] $end
         $var wire 1 =% l $end
         $var wire 1 D% Zero $end
         $var wire 1 m% conti $end
        $upscope $end
        $scope module md $end
         $var wire 7 U% op [6:0] $end
         $var wire 2 Y% ResultSrcD [1:0] $end
         $var wire 1 i% MemWriteD $end
         $var wire 1 Z% BranchD $end
         $var wire 1 ]% ALUSrcD $end
         $var wire 1 g% RegWriteD $end
         $var wire 1 [% JumpD $end
         $var wire 1 j% load $end
         $var wire 1 _% jarl $end
         $var wire 3 H% ImmSrcD [2:0] $end
         $var wire 2 X% ALUOp [1:0] $end
         $var wire 14 p% controls [13:0] $end
        $upscope $end
       $upscope $end
       $scope module dp $end
        $var wire 1 )+ clk $end
        $var wire 1 C+ reset $end
        $var wire 2 F% ResultSrc [1:0] $end
        $var wire 1 @% PCSrc $end
        $var wire 1 :% ALUSrc $end
        $var wire 1 ;% RegWrite $end
        $var wire 1 C% loadW $end
        $var wire 1 E% jarlW $end
        $var wire 3 H% ImmSrc [2:0] $end
        $var wire 4 I% ALUControl [3:0] $end
        $var wire 2 J% SDypeSecM [1:0] $end
        $var wire 1 =% Zero $end
        $var wire 1 D% l $end
        $var wire 32 S$ PCF [31:0] $end
        $var wire 32 T$ Instr [31:0] $end
        $var wire 32 V$ ALUResultM [31:0] $end
        $var wire 32 X$ WriteData [31:0] $end
        $var wire 32 U$ ReadData [31:0] $end
        $var wire 1 >% stallD $end
        $var wire 1 ?% stallF $end
        $var wire 1 @% FlushD $end
        $var wire 1 A% FlushE $end
        $var wire 2 K% ForWordAE [1:0] $end
        $var wire 2 L% ForWordBE [1:0] $end
        $var wire 5 M% RdW [4:0] $end
        $var wire 5 N% RdM [4:0] $end
        $var wire 5 O% RdE [4:0] $end
        $var wire 5 P% Rs1D [4:0] $end
        $var wire 5 Q% Rs2D [4:0] $end
        $var wire 5 R% Rs1E [4:0] $end
        $var wire 5 S% Rs2E [4:0] $end
        $var wire 32 T% InstrD [31:0] $end
        $var wire 32 W$ mask [31:0] $end
        $var wire 32 q% PCFNext [31:0] $end
        $var wire 32 r% PCPlus4F [31:0] $end
        $var wire 32 s% PCTargetE [31:0] $end
        $var wire 32 t% PCTargetW [31:0] $end
        $var wire 32 u% PCTargetM [31:0] $end
        $var wire 32 v% PCD [31:0] $end
        $var wire 32 w% PCPlus4D [31:0] $end
        $var wire 32 x% PCE [31:0] $end
        $var wire 32 y% PCPlus4E [31:0] $end
        $var wire 32 z% PCPlus4M [31:0] $end
        $var wire 32 {% PCPlus4W [31:0] $end
        $var wire 32 |% PCJamp [31:0] $end
        $var wire 32 }% ImmExtD [31:0] $end
        $var wire 32 ~% ImmExtE [31:0] $end
        $var wire 32 !& ALUResult [31:0] $end
        $var wire 32 "& ALUResultW [31:0] $end
        $var wire 32 #& WriteDataM [31:0] $end
        $var wire 32 $& SrcAE [31:0] $end
        $var wire 32 %& SrcBE [31:0] $end
        $var wire 32 # RD1D [31:0] $end
        $var wire 32 $ RD2D [31:0] $end
        $var wire 32 && RD1E [31:0] $end
        $var wire 32 '& RD2E [31:0] $end
        $var wire 5 (& RdD [4:0] $end
        $var wire 32 )& ResultW [31:0] $end
        $var wire 32 *& WriteDataE [31:0] $end
        $var wire 32 +& ReadDataW [31:0] $end
        $var wire 32 ,& writeReg [31:0] $end
        $var wire 2 -& offset [1:0] $end
        $var wire 3 V% fun3D [2:0] $end
        $var wire 3 .& fun3E [2:0] $end
        $var wire 3 /& fun3M [2:0] $end
        $var wire 3 0& fun3W [2:0] $end
        $scope module Dreg1 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 P+ reset $end
         $var wire 1 @% clr $end
         $var wire 1 1& en $end
         $var wire 32 T$ d [31:0] $end
         $var wire 32 T% q [31:0] $end
        $upscope $end
        $scope module Dreg2 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 @% clr $end
         $var wire 1 1& en $end
         $var wire 32 S$ d [31:0] $end
         $var wire 32 v% q [31:0] $end
        $upscope $end
        $scope module Dreg3 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 P+ reset $end
         $var wire 1 @% clr $end
         $var wire 1 1& en $end
         $var wire 32 r% d [31:0] $end
         $var wire 32 w% q [31:0] $end
        $upscope $end
        $scope module Ereg1 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 32 v% d [31:0] $end
         $var wire 32 x% q [31:0] $end
        $upscope $end
        $scope module Ereg2 $end
         $var wire 32 l+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 5 P% d [4:0] $end
         $var wire 5 R% q [4:0] $end
        $upscope $end
        $scope module Ereg3 $end
         $var wire 32 l+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 5 Q% d [4:0] $end
         $var wire 5 S% q [4:0] $end
        $upscope $end
        $scope module Ereg4 $end
         $var wire 32 l+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 5 (& d [4:0] $end
         $var wire 5 O% q [4:0] $end
        $upscope $end
        $scope module Ereg5 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 32 }% d [31:0] $end
         $var wire 32 ~% q [31:0] $end
        $upscope $end
        $scope module Ereg6 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 32 w% d [31:0] $end
         $var wire 32 y% q [31:0] $end
        $upscope $end
        $scope module Ereg7 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 32 $ d [31:0] $end
         $var wire 32 '& q [31:0] $end
        $upscope $end
        $scope module Ereg8 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 32 # d [31:0] $end
         $var wire 32 && q [31:0] $end
        $upscope $end
        $scope module Ereg_FUN3 $end
         $var wire 32 j+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 A% clr $end
         $var wire 3 V% d [2:0] $end
         $var wire 3 .& q [2:0] $end
        $upscope $end
        $scope module Mreg1 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 32 !& d [31:0] $end
         $var wire 32 V$ q [31:0] $end
        $upscope $end
        $scope module Mreg11 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 32 s% d [31:0] $end
         $var wire 32 u% q [31:0] $end
        $upscope $end
        $scope module Mreg2 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 32 *& d [31:0] $end
         $var wire 32 #& q [31:0] $end
        $upscope $end
        $scope module Mreg3 $end
         $var wire 32 l+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 5 O% d [4:0] $end
         $var wire 5 N% q [4:0] $end
        $upscope $end
        $scope module Mreg4 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 32 y% d [31:0] $end
         $var wire 32 z% q [31:0] $end
        $upscope $end
        $scope module Mreg_FUN3 $end
         $var wire 32 j+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 3 .& d [2:0] $end
         $var wire 3 /& q [2:0] $end
        $upscope $end
        $scope module Wreg1 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 32 V$ d [31:0] $end
         $var wire 32 "& q [31:0] $end
        $upscope $end
        $scope module Wreg2 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 32 U$ d [31:0] $end
         $var wire 32 +& q [31:0] $end
        $upscope $end
        $scope module Wreg3 $end
         $var wire 32 l+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 5 N% d [4:0] $end
         $var wire 5 M% q [4:0] $end
        $upscope $end
        $scope module Wreg4 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 32 z% d [31:0] $end
         $var wire 32 {% q [31:0] $end
        $upscope $end
        $scope module Wreg9 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 32 u% d [31:0] $end
         $var wire 32 t% q [31:0] $end
        $upscope $end
        $scope module Wreg_FUN3 $end
         $var wire 32 j+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 3 /& d [2:0] $end
         $var wire 3 0& q [2:0] $end
        $upscope $end
        $scope module alu $end
         $var wire 32 $& a [31:0] $end
         $var wire 32 %& b [31:0] $end
         $var wire 4 I% alucontrol [3:0] $end
         $var wire 32 !& result [31:0] $end
         $var wire 1 =% zero $end
         $var wire 1 D% l $end
         $var wire 32 2& condinvb [31:0] $end
         $var wire 32 3& sum [31:0] $end
        $upscope $end
        $scope module ext $end
         $var wire 25 4& instr [31:7] $end
         $var wire 3 H% immsrc [2:0] $end
         $var wire 32 }% immext [31:0] $end
        $upscope $end
        $scope module lc $end
         $var wire 32 )& ResultW [31:0] $end
         $var wire 3 0& funct3 [2:0] $end
         $var wire 1 C% load $end
         $var wire 32 ,& lData [31:0] $end
        $upscope $end
        $scope module pcadd4 $end
         $var wire 32 S$ a [31:0] $end
         $var wire 32 d+ b [31:0] $end
         $var wire 32 r% y [31:0] $end
        $upscope $end
        $scope module pcaddbranch $end
         $var wire 32 x% a [31:0] $end
         $var wire 32 ~% b [31:0] $end
         $var wire 32 s% y [31:0] $end
        $upscope $end
        $scope module pcmux $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 32 r% d0 [31:0] $end
         $var wire 32 |% d1 [31:0] $end
         $var wire 1 @% s $end
         $var wire 32 q% y [31:0] $end
        $upscope $end
        $scope module pcmux2 $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 32 s% d0 [31:0] $end
         $var wire 32 "& d1 [31:0] $end
         $var wire 1 E% s $end
         $var wire 32 |% y [31:0] $end
        $upscope $end
        $scope module pcreg $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 1 )+ clk $end
         $var wire 1 C+ reset $end
         $var wire 1 5& en $end
         $var wire 32 q% d [31:0] $end
         $var wire 32 S$ q [31:0] $end
        $upscope $end
        $scope module resultmux $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 32 "& d0 [31:0] $end
         $var wire 32 +& d1 [31:0] $end
         $var wire 32 {% d2 [31:0] $end
         $var wire 32 t% d3 [31:0] $end
         $var wire 2 F% s [1:0] $end
         $var wire 32 )& y [31:0] $end
        $upscope $end
        $scope module rff $end
         $var wire 1 B+ clk $end
         $var wire 1 ;% we3 $end
         $var wire 5 P% a1 [4:0] $end
         $var wire 5 Q% a2 [4:0] $end
         $var wire 5 M% a3 [4:0] $end
         $var wire 32 ,& wd3 [31:0] $end
         $var wire 32 # rd1 [31:0] $end
         $var wire 32 $ rd2 [31:0] $end
         $var wire 32 % rf[0] [31:0] $end
         $var wire 32 & rf[1] [31:0] $end
         $var wire 32 ' rf[2] [31:0] $end
         $var wire 32 ( rf[3] [31:0] $end
         $var wire 32 ) rf[4] [31:0] $end
         $var wire 32 * rf[5] [31:0] $end
         $var wire 32 + rf[6] [31:0] $end
         $var wire 32 , rf[7] [31:0] $end
         $var wire 32 - rf[8] [31:0] $end
         $var wire 32 . rf[9] [31:0] $end
         $var wire 32 / rf[10] [31:0] $end
         $var wire 32 0 rf[11] [31:0] $end
         $var wire 32 1 rf[12] [31:0] $end
         $var wire 32 2 rf[13] [31:0] $end
         $var wire 32 3 rf[14] [31:0] $end
         $var wire 32 4 rf[15] [31:0] $end
         $var wire 32 5 rf[16] [31:0] $end
         $var wire 32 6 rf[17] [31:0] $end
         $var wire 32 7 rf[18] [31:0] $end
         $var wire 32 8 rf[19] [31:0] $end
         $var wire 32 9 rf[20] [31:0] $end
         $var wire 32 : rf[21] [31:0] $end
         $var wire 32 ; rf[22] [31:0] $end
         $var wire 32 < rf[23] [31:0] $end
         $var wire 32 = rf[24] [31:0] $end
         $var wire 32 > rf[25] [31:0] $end
         $var wire 32 ? rf[26] [31:0] $end
         $var wire 32 @ rf[27] [31:0] $end
         $var wire 32 A rf[28] [31:0] $end
         $var wire 32 B rf[29] [31:0] $end
         $var wire 32 C rf[30] [31:0] $end
         $var wire 32 D rf[31] [31:0] $end
        $upscope $end
        $scope module srcAmux $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 32 && d0 [31:0] $end
         $var wire 32 )& d1 [31:0] $end
         $var wire 32 V$ d2 [31:0] $end
         $var wire 32 u% d3 [31:0] $end
         $var wire 2 K% s [1:0] $end
         $var wire 32 $& y [31:0] $end
        $upscope $end
        $scope module srcBmux $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 32 '& d0 [31:0] $end
         $var wire 32 )& d1 [31:0] $end
         $var wire 32 V$ d2 [31:0] $end
         $var wire 2 L% s [1:0] $end
         $var wire 32 *& y [31:0] $end
        $upscope $end
        $scope module srcbmux $end
         $var wire 32 k+ WIDTH [31:0] $end
         $var wire 32 *& d0 [31:0] $end
         $var wire 32 ~% d1 [31:0] $end
         $var wire 1 :% s $end
         $var wire 32 %& y [31:0] $end
        $upscope $end
        $scope module wc $end
         $var wire 32 #& WriteDataM [31:0] $end
         $var wire 2 J% WDypesrc [1:0] $end
         $var wire 2 -& a [1:0] $end
         $var wire 32 W$ write_mask [31:0] $end
         $var wire 32 X$ WData [31:0] $end
        $upscope $end
       $upscope $end
       $scope module hu $end
        $var wire 1 ;% RegWriteW $end
        $var wire 1 <% RegWriteM $end
        $var wire 5 M% rdw [4:0] $end
        $var wire 5 N% rdm [4:0] $end
        $var wire 5 O% rde [4:0] $end
        $var wire 2 B% ResultSrcE [1:0] $end
        $var wire 2 G% ResultSrcM [1:0] $end
        $var wire 1 @% PCsrc $end
        $var wire 5 R% rs1e [4:0] $end
        $var wire 5 S% rs2e [4:0] $end
        $var wire 5 P% rs1d [4:0] $end
        $var wire 5 Q% rs2d [4:0] $end
        $var wire 2 K% forwardae [1:0] $end
        $var wire 2 L% forwardbe [1:0] $end
        $var wire 1 A% flushe $end
        $var wire 1 @% flushd $end
        $var wire 1 ?% stallf $end
        $var wire 1 >% stalld $end
        $var wire 1 6& lwStall $end
       $upscope $end
      $upscope $end
      $scope module u_axi_arbiter $end
       $var wire 1 )+ clk $end
       $var wire 1 C+ reset $end
       $var wire 1 [$ cpu1_awvalid $end
       $var wire 1 Z$ cpu1_awready $end
       $var wire 32 \$ cpu1_awaddr [31:0] $end
       $var wire 4 T+ cpu1_awid [3:0] $end
       $var wire 8 Y+ cpu1_awlen [7:0] $end
       $var wire 3 Z+ cpu1_awsize [2:0] $end
       $var wire 2 [+ cpu1_awburst [1:0] $end
       $var wire 1 ^$ cpu1_wvalid $end
       $var wire 1 ]$ cpu1_wready $end
       $var wire 64 _$ cpu1_wdata [63:0] $end
       $var wire 8 \+ cpu1_wstrb [7:0] $end
       $var wire 1 a$ cpu1_wlast $end
       $var wire 1 b$ cpu1_bvalid $end
       $var wire 1 S+ cpu1_bready $end
       $var wire 2 c$ cpu1_bresp [1:0] $end
       $var wire 4 d$ cpu1_bid [3:0] $end
       $var wire 1 f$ cpu1_arvalid $end
       $var wire 1 e$ cpu1_arready $end
       $var wire 32 g$ cpu1_araddr [31:0] $end
       $var wire 4 T+ cpu1_arid [3:0] $end
       $var wire 8 Y+ cpu1_arlen [7:0] $end
       $var wire 3 Z+ cpu1_arsize [2:0] $end
       $var wire 2 [+ cpu1_arburst [1:0] $end
       $var wire 1 i$ cpu1_rvalid $end
       $var wire 1 h$ cpu1_rready $end
       $var wire 64 k$ cpu1_rdata [63:0] $end
       $var wire 2 j$ cpu1_rresp [1:0] $end
       $var wire 1 m$ cpu1_rlast $end
       $var wire 4 n$ cpu1_rid [3:0] $end
       $var wire 1 p$ cpu2_awvalid $end
       $var wire 1 o$ cpu2_awready $end
       $var wire 32 q$ cpu2_awaddr [31:0] $end
       $var wire 4 T+ cpu2_awid [3:0] $end
       $var wire 8 Y+ cpu2_awlen [7:0] $end
       $var wire 3 Z+ cpu2_awsize [2:0] $end
       $var wire 2 [+ cpu2_awburst [1:0] $end
       $var wire 1 s$ cpu2_wvalid $end
       $var wire 1 r$ cpu2_wready $end
       $var wire 64 t$ cpu2_wdata [63:0] $end
       $var wire 8 \+ cpu2_wstrb [7:0] $end
       $var wire 1 v$ cpu2_wlast $end
       $var wire 1 w$ cpu2_bvalid $end
       $var wire 1 S+ cpu2_bready $end
       $var wire 2 x$ cpu2_bresp [1:0] $end
       $var wire 4 y$ cpu2_bid [3:0] $end
       $var wire 1 {$ cpu2_arvalid $end
       $var wire 1 z$ cpu2_arready $end
       $var wire 32 |$ cpu2_araddr [31:0] $end
       $var wire 4 T+ cpu2_arid [3:0] $end
       $var wire 8 Y+ cpu2_arlen [7:0] $end
       $var wire 3 Z+ cpu2_arsize [2:0] $end
       $var wire 2 [+ cpu2_arburst [1:0] $end
       $var wire 1 ~$ cpu2_rvalid $end
       $var wire 1 }$ cpu2_rready $end
       $var wire 64 "% cpu2_rdata [63:0] $end
       $var wire 2 !% cpu2_rresp [1:0] $end
       $var wire 1 $% cpu2_rlast $end
       $var wire 4 %% cpu2_rid [3:0] $end
       $var wire 1 8! xbar_awvalid $end
       $var wire 1 7! xbar_awready $end
       $var wire 32 :! xbar_awaddr [31:0] $end
       $var wire 4 9! xbar_awid [3:0] $end
       $var wire 8 ;! xbar_awlen [7:0] $end
       $var wire 3 <! xbar_awsize [2:0] $end
       $var wire 2 =! xbar_awburst [1:0] $end
       $var wire 1 ?! xbar_wvalid $end
       $var wire 1 >! xbar_wready $end
       $var wire 64 @! xbar_wdata [63:0] $end
       $var wire 8 B! xbar_wstrb [7:0] $end
       $var wire 1 C! xbar_wlast $end
       $var wire 1 &* xbar_bvalid $end
       $var wire 1 D! xbar_bready $end
       $var wire 2 Z' xbar_bresp [1:0] $end
       $var wire 4 '* xbar_bid [3:0] $end
       $var wire 1 F! xbar_arvalid $end
       $var wire 1 E! xbar_arready $end
       $var wire 32 H! xbar_araddr [31:0] $end
       $var wire 4 G! xbar_arid [3:0] $end
       $var wire 8 I! xbar_arlen [7:0] $end
       $var wire 3 J! xbar_arsize [2:0] $end
       $var wire 2 K! xbar_arburst [1:0] $end
       $var wire 1 (* xbar_rvalid $end
       $var wire 1 L! xbar_rready $end
       $var wire 64 [' xbar_rdata [63:0] $end
       $var wire 2 ]' xbar_rresp [1:0] $end
       $var wire 1 ^' xbar_rlast $end
       $var wire 4 )* xbar_rid [3:0] $end
       $var wire 2 7& state [1:0] $end
       $var wire 2 R+ IDLE [1:0] $end
       $var wire 2 [+ CPU1 [1:0] $end
       $var wire 2 m+ CPU2 [1:0] $end
      $upscope $end
     $upscope $end
    $upscope $end
    $scope module cpu_reset_chain $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ io_d $end
     $var wire 1 8& io_q $end
     $scope module output_chain $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ io_d $end
      $var wire 1 8& io_q $end
      $var wire 1 8& sync_0 $end
      $var wire 1 9& sync_1 $end
      $var wire 1 :& sync_2 $end
      $var wire 1 ;& sync_3 $end
      $var wire 1 <& sync_4 $end
      $var wire 1 =& sync_5 $end
      $var wire 1 >& sync_6 $end
      $var wire 1 ?& sync_7 $end
      $var wire 1 @& sync_8 $end
      $var wire 1 A& sync_9 $end
     $upscope $end
    $upscope $end
    $scope module lgpio $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 e auto_in_psel $end
     $var wire 1 f auto_in_penable $end
     $var wire 1 Y auto_in_pwrite $end
     $var wire 29 d auto_in_paddr [28:0] $end
     $var wire 3 O+ auto_in_pprot [2:0] $end
     $var wire 32 ~* auto_in_pwdata [31:0] $end
     $var wire 4 Z auto_in_pstrb [3:0] $end
     $var wire 1 P+ auto_in_pready $end
     $var wire 1 P+ auto_in_pslverr $end
     $var wire 32 Q+ auto_in_prdata [31:0] $end
     $var wire 16 ++ gpio_bundle_out [15:0] $end
     $var wire 16 ,+ gpio_bundle_in [15:0] $end
     $var wire 8 -+ gpio_bundle_seg_0 [7:0] $end
     $var wire 8 .+ gpio_bundle_seg_1 [7:0] $end
     $var wire 8 /+ gpio_bundle_seg_2 [7:0] $end
     $var wire 8 0+ gpio_bundle_seg_3 [7:0] $end
     $var wire 8 1+ gpio_bundle_seg_4 [7:0] $end
     $var wire 8 2+ gpio_bundle_seg_5 [7:0] $end
     $var wire 8 3+ gpio_bundle_seg_6 [7:0] $end
     $var wire 8 4+ gpio_bundle_seg_7 [7:0] $end
     $scope module mgpio $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 32 !+ in_paddr [31:0] $end
      $var wire 1 e in_psel $end
      $var wire 1 f in_penable $end
      $var wire 3 O+ in_pprot [2:0] $end
      $var wire 1 Y in_pwrite $end
      $var wire 32 ~* in_pwdata [31:0] $end
      $var wire 4 Z in_pstrb [3:0] $end
      $var wire 1 P+ in_pready $end
      $var wire 32 Q+ in_prdata [31:0] $end
      $var wire 1 P+ in_pslverr $end
      $var wire 16 ++ gpio_out [15:0] $end
      $var wire 16 ,+ gpio_in [15:0] $end
      $var wire 8 -+ gpio_seg_0 [7:0] $end
      $var wire 8 .+ gpio_seg_1 [7:0] $end
      $var wire 8 /+ gpio_seg_2 [7:0] $end
      $var wire 8 0+ gpio_seg_3 [7:0] $end
      $var wire 8 1+ gpio_seg_4 [7:0] $end
      $var wire 8 2+ gpio_seg_5 [7:0] $end
      $var wire 8 3+ gpio_seg_6 [7:0] $end
      $var wire 8 4+ gpio_seg_7 [7:0] $end
     $upscope $end
    $upscope $end
    $scope module lkeyboard $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 b auto_in_psel $end
     $var wire 1 c auto_in_penable $end
     $var wire 1 Y auto_in_pwrite $end
     $var wire 29 d auto_in_paddr [28:0] $end
     $var wire 3 O+ auto_in_pprot [2:0] $end
     $var wire 32 ~* auto_in_pwdata [31:0] $end
     $var wire 4 Z auto_in_pstrb [3:0] $end
     $var wire 1 P+ auto_in_pready $end
     $var wire 1 P+ auto_in_pslverr $end
     $var wire 32 Q+ auto_in_prdata [31:0] $end
     $var wire 1 5+ ps2_bundle_clk $end
     $var wire 1 6+ ps2_bundle_data $end
     $scope module mps2 $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 32 !+ in_paddr [31:0] $end
      $var wire 1 b in_psel $end
      $var wire 1 c in_penable $end
      $var wire 3 O+ in_pprot [2:0] $end
      $var wire 1 Y in_pwrite $end
      $var wire 32 ~* in_pwdata [31:0] $end
      $var wire 4 Z in_pstrb [3:0] $end
      $var wire 1 P+ in_pready $end
      $var wire 32 Q+ in_prdata [31:0] $end
      $var wire 1 P+ in_pslverr $end
      $var wire 1 5+ ps2_clk $end
      $var wire 1 6+ ps2_data $end
     $upscope $end
    $upscope $end
    $scope module lmrom $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 F" auto_in_awvalid $end
     $var wire 1 G" auto_in_wvalid $end
     $var wire 1 H" auto_in_arready $end
     $var wire 1 I" auto_in_arvalid $end
     $var wire 4 &! auto_in_arid [3:0] $end
     $var wire 30 J" auto_in_araddr [29:0] $end
     $var wire 3 (! auto_in_arsize [2:0] $end
     $var wire 1 a' auto_in_rready $end
     $var wire 1 K" auto_in_rvalid $end
     $var wire 4 L" auto_in_rid [3:0] $end
     $var wire 64 M" auto_in_rdata [63:0] $end
     $var wire 1 K" state $end
     $var wire 64 M" nodeIn_rdata_r [63:0] $end
     $var wire 4 L" nodeIn_rid_r [3:0] $end
     $scope module mrom $end
      $var wire 32 B& raddr [31:0] $end
      $var wire 1 C& ren $end
      $var wire 32 D& rdata [31:0] $end
     $upscope $end
    $upscope $end
    $scope module lpsram $end
     $var wire 1 )+ clock $end
     $var wire 1 *+ reset $end
     $var wire 1 g auto_in_psel $end
     $var wire 1 h auto_in_penable $end
     $var wire 1 Y auto_in_pwrite $end
     $var wire 32 V auto_in_paddr [31:0] $end
     $var wire 3 O+ auto_in_pprot [2:0] $end
     $var wire 32 ~* auto_in_pwdata [31:0] $end
     $var wire 4 Z auto_in_pstrb [3:0] $end
     $var wire 1 i auto_in_pready $end
     $var wire 1 P+ auto_in_pslverr $end
     $var wire 32 j auto_in_prdata [31:0] $end
     $var wire 1 K qspi_bundle_sck $end
     $var wire 1 L qspi_bundle_ce_n $end
     $var wire 4 A+ qspi_bundle_dio [3:0] $end
     $scope module mpsram $end
      $var wire 1 )+ clock $end
      $var wire 1 *+ reset $end
      $var wire 32 V in_paddr [31:0] $end
      $var wire 1 g in_psel $end
      $var wire 1 h in_penable $end
      $var wire 3 O+ in_pprot [2:0] $end
      $var wire 1 Y in_pwrite $end
      $var wire 32 ~* in_pwdata [31:0] $end
      $var wire 4 Z in_pstrb [3:0] $end
      $var wire 1 i in_pready $end
      $var wire 32 j in_prdata [31:0] $end
      $var wire 1 P+ in_pslverr $end
      $var wire 1 K qspi_sck $end
      $var wire 1 L qspi_ce_n $end
      $var wire 4 A+ qspi_dio [3:0] $end
      $var wire 4 A+ din [3:0] $end
      $var wire 4 "+ dout [3:0] $end
      $var wire 4 E& douten [3:0] $end
      $var wire 1 F& ack $end
      $scope module u0 $end
       $var wire 1 )+ clk_i $end
       $var wire 1 *+ rst_i $end
       $var wire 32 V adr_i [31:0] $end
       $var wire 32 ~* dat_i [31:0] $end
       $var wire 32 j dat_o [31:0] $end
       $var wire 4 Z sel_i [3:0] $end
       $var wire 1 g cyc_i $end
       $var wire 1 g stb_i $end
       $var wire 1 F& ack_o $end
       $var wire 1 Y we_i $end
       $var wire 1 K sck $end
       $var wire 1 L ce_n $end
       $var wire 4 A+ din [3:0] $end
       $var wire 4 "+ dout [3:0] $end
       $var wire 4 E& douten [3:0] $end
       $var wire 1 n+ ST_IDLE [0:0] $end
       $var wire 1 o+ ST_WAIT [0:0] $end
       $var wire 1 G& mr_sck $end
       $var wire 1 H& mr_ce_n $end
       $var wire 4 A+ mr_din [3:0] $end
       